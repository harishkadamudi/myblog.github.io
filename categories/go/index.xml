<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Raspberry Pi Programming</title>
    <link>https://youngkin.github.io/categories/go/</link>
    <description>Recent content in Go on Raspberry Pi Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Nov 2021 13:13:42 -0600</lastBuildDate><atom:link href="https://youngkin.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi GPIO in Go and C - Using a Shift Register &amp; 7 Segment Display</title>
      <link>https://youngkin.github.io/post/shiftregistersevensegdisplay/</link>
      <pubDate>Fri, 19 Nov 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/shiftregistersevensegdisplay/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is the fifth article in a series that explores GPIO programming on a Raspberry Pi 3B+. It is a supplement to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Sunfounder 7-Segment Display&lt;/a&gt; project. You can find the full series &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;here&lt;/a&gt;. The code for the series can be found on &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;Sunfounder RGB LED&lt;/a&gt; project, there are some complicated aspects to this project that aren&amp;rsquo;t well covered in the Sunfounder project documentation. The purpose of this article is to fill those gaps, specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is a &amp;ldquo;shift register&amp;rdquo; (the 74HC595 chip)?&lt;/li&gt;
&lt;li&gt;What are the uses of a shift register?&lt;/li&gt;
&lt;li&gt;What is a 7-segment display?&lt;/li&gt;
&lt;li&gt;How is a shift register used on conjunction with a 7-segment display?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An additional goal of this article is to provide a more complete example of the capability of shift registers and 7-segment displays using a program written in C. This program is significantly more advanced in this area than the Sunfounder code. This article will also provide this same program written in Go.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t worked with LEDs before you should consider having a look at my &lt;a href=&#34;https://youngkin.github.io/post/sunfoundergpionotesled/&#34;&gt;Raspberry Pi GPIO in Go and C - Blinking LED&lt;/a&gt; first. That article covers the basics of using an LED with Raspberry Pi GPIO and the associated C and Go libraries which isn&amp;rsquo;t discussed in this article.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This section is repeated in all articles in my &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;Raspberry Pi GPIO series&lt;/a&gt;. If you&amp;rsquo;ve already completed a project from one of these articles you can skim this section, looking only for required items not included in other projects, specifically the shift register and 7-segment display.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, you&amp;rsquo;ll need a Raspberry Pi. I used a Raspberry Pi 3B+ with the &amp;lsquo;Stretch&amp;rsquo; version of the Raspbian OS. The Raspberry Pi website has instructions on how to &lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;setup a new Raspberry Pi from scratch&lt;/a&gt; if you decide to go that way vs. buying a complete kit.&lt;/p&gt;
&lt;p&gt;Other items you&amp;rsquo;ll need include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/dp/B082KBF7MM/ref=sspa_dk_detail_4?psc=1&amp;amp;pd_rd_i=B082KBF7MM&amp;amp;pd_rd_w=1tGTV&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=fX8JB&amp;amp;pf_rd_r=44DE0RS1E9FD42RBYC7R&amp;amp;pd_rd_r=47cbdc7f-7834-455f-9429-ef74a438bd45&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVVkdZVUZRNUw3ODkmZW5jcnlwdGVkSWQ9QTA4MzI4MzYyU0VLNzBJM0cxRUVMJmVuY3J5cHRlZEFkSWQ9QTA0Mjk1NTMzSzNSWlNFUjU0NURBJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;breadboard&lt;/a&gt; &lt;em&gt;(You may find &lt;a href=&#34;https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard&#34;&gt;this tutorial on breadboards&lt;/a&gt; helpful)&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;some &lt;a href=&#34;https://www.amazon.com/dp/B08HZ26ZLF/ref=syn_sd_onsite_desktop_19?psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExRFpLWElCRjg1MUNMJmVuY3J5cHRlZElkPUEwMjMyMTE1M01aOFE3U1BQS09YSiZlbmNyeXB0ZWRBZElkPUEwODE5NTMxMktEMTlZRjEyQjBJNiZ3aWRnZXROYW1lPXNkX29uc2l0ZV9kZXNrdG9wJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;jumper wires&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/Resistor-Tolerance-Resistors-Assortment-Certificated/dp/B08QR72BFW/ref=sr_1_8?crid=1E3LWKK431TDV&amp;amp;keywords=resistor+assortment&amp;amp;qid=1636936543&amp;amp;qsid=143-6049131-7886617&amp;amp;s=industrial&amp;amp;sprefix=resistor%2Cindustrial%2C203&amp;amp;sr=1-8&amp;amp;sres=B085NQZNTY%2CB072BL2VX1%2CB07N1ZK8CC%2CB098BKR447%2CB08QR72BFW%2CB07L851T3V%2CB09CZ18Z31%2CB08PF3HNMD%2CB07D54XMFK%2CB088WQMNYK%2CB08NY3XR96%2CB06WRQS97C%2CB07PXYVP3J%2CB07D2Z45CG%2CB089Q88QPN%2CB08ZRYH9VC%2CB08FD1XVL6%2CB08QRH6HFT%2CB07PTNN78Z%2CB07P3MFG5D&#34;&gt;220 Ohm resistor&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/Texas-Instruments-SN74HC595N-Registers-3-State/dp/B01J6WI7RA/ref=sr_1_5?keywords=shift+register+74hc595&amp;amp;qid=1636936939&amp;amp;qsid=143-6049131-7886617&amp;amp;s=industrial&amp;amp;sr=1-5&amp;amp;sres=B07HFWB9L9%2CB01J6WI7RA%2CB0993RQGQY%2CB09CTHBH9P%2CB07B9DCR17%2CB08Z8B9QXY%2CB06WD3W8Q3%2CB07ZHGL8LN%2CB0842PRWJG%2CB07DR7PYYT%2CB01HEPJOV4%2CB07WNHBP86%2CB07RL1398S%2CB07B9D7SPC%2CB08Z3NH5BK%2CB07MQ5X9Q3%2CB07DL13RZH%2CB08JTXNP9Q%2CB08BR1PPQM%2CB01D8KOZF4&#34;&gt;74HC595 shift register&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/microtivity-7-segment-Display-Common-Cathode/dp/B004S95VJE/ref=sr_1_11?crid=AOG8YK9L0NA1&amp;amp;keywords=7+segment+display&amp;amp;qid=1636937044&amp;amp;qsid=143-6049131-7886617&amp;amp;s=industrial&amp;amp;sprefix=7+segment%2Cindustrial%2C211&amp;amp;sr=1-11&amp;amp;sres=B07GTQZ286%2CB00XW2L6SS%2CB07MCGDST2%2CB00EZBGUMC%2CB08THC6NGS%2CB07GTQ8NDC%2CB07GTPYXNF%2CB004S95VJE%2CB00XW2NSU2%2CB0060FGD3M%2CB087B8WTRZ%2CB01D0WSCJA%2CB0060FGCW4%2CB08N15PLSQ%2CB081VDVVSS%2CB07CLCC82N%2CB07GTQFL6J%2CB07GTQ42VR%2CB085WMBYH4%2CB08XPSCG4K&#34;&gt;common cathode 7-segment display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You should also consider getting a &lt;a href=&#34;https://www.amazon.com/dp/B082PRVRYR/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B082PRVRYR&amp;amp;pd_rd_w=8mKhr&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=e9psa&amp;amp;pf_rd_r=S09F37DF2G5FW8B8GX4B&amp;amp;pd_rd_r=c065c120-e60b-45e9-b93b-f581f048cf46&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFCMzhUQ09COFI2VlMmZW5jcnlwdGVkSWQ9QTA5NjU2ODUxRDkxNEYwSTYwV09KJmVuY3J5cHRlZEFkSWQ9QTAxOTg1MTUyRUhEUlc2VzQ2VDQ4JndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;40 pin female to female with a T-Type adapter&lt;/a&gt; to attach the GPIO outputs to the breadboard. You can use only jumper wires, but the T-Type adapter will make things easier and will help prevent damage to the GPIO pins on the Raspberry Pi. If you elect not to buy the 40 pin cable with T-Type adapter you&amp;rsquo;ll need to buy &lt;a href=&#34;https://www.amazon.com/SinLoon-Breadboard-Arduino-Circuit-40-Pack/dp/B08M3QLL3Q/ref=pd_sbs_7/143-0445142-7950409?pd_rd_w=sVLrc&amp;amp;pf_rd_p=8b76d7a7-ab83-4ddc-a92d-e3e33bfdbf03&amp;amp;pf_rd_r=CDM5TGJT03VKF0ZFB577&amp;amp;pd_rd_r=8e58fd82-8503-41cf-b8f2-c78eaeb78d25&amp;amp;pd_rd_wg=tT1U0&amp;amp;pd_rd_i=B08M3QLL3Q&amp;amp;psc=1&#34;&gt;male-to-female jumper wires&lt;/a&gt;. Buying all these things separately will cost more than a kit however.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/dp/B06WP7169Y/ref=sspa_dk_detail_5?psc=1&amp;amp;pd_rd_i=B06WP7169Y&amp;amp;pd_rd_w=OZVyf&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=0V0IH&amp;amp;pf_rd_r=623YJTBQ2CN2B2GYXQG5&amp;amp;pd_rd_r=faa61f0f-3aec-4cf0-8e7e-d44eb1b3b92f&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyUVlDQzMzVVZBMFYxJmVuY3J5cHRlZElkPUEwMzExNzk4MUhGSjFSS0VKTlBROCZlbmNyeXB0ZWRBZElkPUEwMzYwNjg2UUdMRU44N0YzNzIwJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;Here&amp;rsquo;s a simple kit&lt;/a&gt; that has all (most?) of the above. The photo of the kit appears to show a shift register, but I can&amp;rsquo;t be sure. I&amp;rsquo;m finding the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt; especially useful. NOTE: The Ultimate Starter Kit and the Raphael Kit are the same product.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RaphaelKit.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Ultimate Starter/Raphael kit&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;You will also need some basic C  and Go programming knowledge as well as familiarity with logging on to a Raspberry Pi terminal, or into the desktop GUI that comes with some OS versions. Depending on the approach you take, you may need to connect a keyboard and monitor to the Raspberry Pi. I simply SSH into the Pi. You&amp;rsquo;ll also need familiarity with how to use an editor like vim or nano.&lt;/p&gt;
&lt;p&gt;To compile and run the C program you&amp;rsquo;ll need the &lt;a href=&#34;https://github.com/WiringPi&#34;&gt;WiringPi&lt;/a&gt; library. It&amp;rsquo;s easy to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install wiringpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then test the installation using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi@pi-node1:~/go/src/github.com/youngkin/gpio/rgbled $ gpio -v
gpio version: 2.50
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3B+, Revision: 03, Memory: 1024MB, Maker: Sony
  * Device tree is enabled.
  *--&amp;gt; Raspberry Pi &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above you&amp;rsquo;ll notice &lt;code&gt;gpio version: 2.50&lt;/code&gt;. If you&amp;rsquo;re using a Rasberry Pi 4, use the instructions given in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/check_the_wiringpi_c.html&#34;&gt;Checking the WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;WiringPi is unique in that it includes a command line tool, &lt;code&gt;gpio&lt;/code&gt;, as shown above, that can be used to manage, control, and query the GPIO board. This can be very handy. See the &lt;a href=&#34;http://wiringpi.com/the-gpio-utility/&#34;&gt;gpio reference&lt;/a&gt; for more information on what it can do and how to use it.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Go development on a Raspberry Pi you&amp;rsquo;ll need to install the development environment onto the Raspberry Pi. &lt;a href=&#34;https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/&#34;&gt;Here&amp;rsquo;s a simple source&lt;/a&gt; that explains how to accomplish this. This source is a little dated, but the only significant issue is with the version of Go to install. The source shows installing Go &lt;strong&gt;1.14.4.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.14.4.linuxarmv6l.tar.gz&lt;/strong&gt;. The current versions are &lt;strong&gt;1.17.1.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. For the Raspberry Pi 3B+ the correct choice will be &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. The other is intended for 64 bit systems like the Raspberry Pi 4 series. You can find current ARM versions of Go at the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang download site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Go development you&amp;rsquo;ll also need the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;If you want to veer away from the cookbook style of the Sunfounder docs you&amp;rsquo;ll need some basic knowledge of Linux . For example, I won&amp;rsquo;t be explaining what &lt;strong&gt;root privileges&lt;/strong&gt; are.&lt;/p&gt;
&lt;h2 id=&#34;information-that-would-have-been-helpful&#34;&gt;Information that would have been helpful&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Sunfounder 7-Segment Display&lt;/a&gt; project documentation pretty much just jumps into how to wire up the breadboard and the code without mentioning much about the hardware components, especially the shift register. Even the code description was a little confusing given my lack of knowledge about shift registers. I accidentally stumbled across the &lt;a href=&#34;https://docs.sunfounder.com/projects/electronic-kit/en/latest/lesson_19_7-segment.html&#34;&gt;Sunfounder 7-Segment Python&lt;/a&gt; project documentation that did provide some useful information on the 7-segment display, but still no mention of the shift register. This project could easily be done without the shift register, in fact many &lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;other articles on 7-segment displays&lt;/a&gt; do just that. So why does the project use a shift register? Why not just wire the 7-segment display directly to the GPIO pins? Clearly there&amp;rsquo;s something to the shift register and I wanted to know what that was. It turns out, for me anyway, that this project is really about shift register with the 7-segment display being merely a tool to visualize how shift registers work. But before we get to shift registers, let&amp;rsquo;s have a short discussion about 7-segment displays.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-7-segment-display&#34;&gt;What is a 7-segment display?&lt;/h3&gt;
&lt;p&gt;So what is a 7-segment display? Well, to be pedantic, it has 8 segments if you include the decimal point on the device. That aside, it&amp;rsquo;s a common device you&amp;rsquo;re already familiar with having seen them used in everything from clocks to calculators and other devices that need a numeric display. In terms of the physical implementation there are a few details we need to know.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pinout diagram&lt;/th&gt;
&lt;th&gt;LED Identification diagram&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/7segmentdisplaypinout.png&#34; align=&#34;center&#34; width=&#34;150&#34;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/sevensegmentdisplaydiagram.png&#34; align=&#34;center&#34; width=&#34;200&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;Image Credit: Circuit Basics&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;First of all, the diagram to the above left shows the pinout designations for the 7-segment display. This diagram shows the middle pins on the top and the bottom with a (-) annotation. This designates those pins to be the ground pins for the display. The letters on the remaining pins correspond to the letters in the LED identification diagram on the right. For example, applying power to the &amp;lsquo;A&amp;rsquo; pin on the display will light up the LED labeled &amp;lsquo;A&amp;rsquo; in the diagram to the right. The letters &amp;ldquo;DP&amp;rdquo; stand for decimal point.&lt;/p&gt;
&lt;p&gt;For this project we need what is known as a common cathode 7-segment display. This is what the diagram above left is showing &lt;em&gt;(the middle pins on the top and the bottom have a (-) annotation)&lt;/em&gt;. All this means is that all the negative terminals of the LEDs in the display are connected to a common ground pin. Common anode is the other type, which as you might expect, means all the LEDs&amp;rsquo; positive terminals are connected to the same pin.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/commoncathodeoranode.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;Image Credit: Circuit Basics&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;If you&amp;rsquo;re using the Sunfounder kit the 7-segment display is a common cathode display. If you got a 7-segment display from another source you might want to verify it&amp;rsquo;s type. Determining whether a 7-segment display is a common cathode or common anode is fairly easy to do. Paraphrasing from &lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;How to set up seven segment displays on the Arduino&lt;/a&gt;, &lt;em&gt;which is also the source of the above diagram&lt;/em&gt;, the steps are as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While the above diagram shows an Arduino, hooking it up to a Raspberry Pi is very similar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You&amp;rsquo;ll need the Raspberry Pi 3.3v power pin hooked up to a breadboard.
&lt;ol&gt;
&lt;li&gt;Connect the power from the Raspberry Pi as shown above (or to the breadboard&amp;rsquo;s power bus).&lt;/li&gt;
&lt;li&gt;Connect a resistor between the 2 sides of the breadboard, or from the power bus to one side of the breadboard.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Connect a jumper wire (red) on the far end of the resistor from the power source.&lt;/li&gt;
&lt;li&gt;Connect a jumper wire (black) to the Raspberry Pi&amp;rsquo;s GPIO ground pin.&lt;/li&gt;
&lt;li&gt;Connect the black jumper wire (ground) to the middle pin, top or bottom, of the display.&lt;/li&gt;
&lt;li&gt;Connect the red jumper wire (positive) to any of the other pins (except the middle pin!).&lt;/li&gt;
&lt;li&gt;If an LED lights up the display is a common cathode.&lt;/li&gt;
&lt;li&gt;If an LED doesn&amp;rsquo;t light up
&lt;ol&gt;
&lt;li&gt;Disconnect the jumpers from the display&lt;/li&gt;
&lt;li&gt;Connect the red jumper to one of the middle pins, top or bottom&lt;/li&gt;
&lt;li&gt;Connect the black wire to one of the other pins.&lt;/li&gt;
&lt;li&gt;At this point an LED should light up and you&amp;rsquo;ve verified that the display is a common anode display&lt;/li&gt;
&lt;li&gt;If no LED lights up then double-check your wiring.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/Fa7BHbPAM98&#34;&gt;This YouTube video&lt;/a&gt; shows how to accomplish this using a multimeter instead of wiring up a breadboard as described above.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-shift-register-and-what-is-it-good-for&#34;&gt;What is a shift register and what is it good for?&lt;/h3&gt;
&lt;p&gt;There are &lt;a href=&#34;https://www.elprocus.com/what-is-a-shift-register-different-types-counters-and-applications/&#34;&gt;several types of shift registers&lt;/a&gt;. For this project we&amp;rsquo;re using what&amp;rsquo;s known as a &amp;ldquo;Serial In, Parallel Out&amp;rdquo; (SIPO) shift register. This type of shift register converts a serial input into a parallel output. For example, several pulses of a signal generated on a single Raspberry Pi GPIO pin can be accumulated by the shift register and then sent as a single parallel output to a 7-segment display. This is exactly what is being done in this project.&lt;/p&gt;
&lt;p&gt;So why use a shift register? Well for one, as noted above, it only takes one GPIO pin to drive 8 pins on a 7-segment display &lt;em&gt;(not quite true, this will be explained in more detail farther into the article)&lt;/em&gt;. Versions of this project without a shift register take 8 GPIO pins to accomplish the same thing. So, one use of a shift register is to conserve GPIO pins. This is especially true of LED displays with a very large number of LEDs that perhaps wouldn&amp;rsquo;t be usable due to a lack of available GPIO pins. Although this isn&amp;rsquo;t true of a 7-segment display, some devices only take parallel input. So for this kind of situation, a SIPO shift register is mandatory in converting a serial source into a parallel output.&lt;/p&gt;
&lt;h4 id=&#34;shift-register-anatomy&#34;&gt;Shift register anatomy&lt;/h4&gt;
&lt;p&gt;The 74HC595 shift register has a couple of logical components that are pertinent to this article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input shift register - This is a series of connected flip-flop devices that receive incoming (serial) data on the receipt of each synchronizing clock pulse (more about this later). This register is comprised of outputs that are named in sequence from Qa&amp;rsquo; to Qh&amp;rsquo;, i.e., Qa&amp;rsquo;, Qb&amp;rsquo;, &amp;hellip;, Qh&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Output or storage register - This is another series of connected flip-flop devices that transfer the serial data in parallel to a connected device. This register is comprised of outputs that are named in sequence from Qa to Qh, and Qh&amp;rsquo; (more on Qh&amp;rsquo; below).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This anatomy is shown graphically in the following, albeit somewhat complex, diagram from the &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1636840974607&amp;amp;ref_url=https%253A%252F%252Fwww.google.com%252F&#34;&gt;Texas Instruments CD74HC595 8-Bit Shift Registers with 3-State Output Registers datasheet&lt;/a&gt;. The first column of 8 boxes to the left, labeled C1 or C2, comprise the input shift register. The second column of 8 boxes to the right, labeled C3, comprise the output shift register. The output register&amp;rsquo;s output pins can be seen at the far right, labeled Qa through Qh, and Qh&amp;rsquo;. The input and control channels, as shown by OE, RCLK, SRCLR, SRCLK, and SER in the upper left of the diagram, are discussed in more detail below.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/74HC595Schematic.png&#34; align=&#34;center&#34; width=&#34;600&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1636840974607&amp;ref_url=https%253A%252F%252Fwww.google.com%252F&#34;&gt;TI CD74HC595 schematic diagram - Image Credit: Texas Instruments&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;More information pertaining to the Q* names for the registers&amp;rsquo; outputs is provided below.&lt;/p&gt;
&lt;p&gt;It is a little confusing for the entire device to be called shift register as well as the input component to also be called shift register. To differentiate between the two, if it&amp;rsquo;s not clear from the context, I&amp;rsquo;ll make sure to reference which one I&amp;rsquo;m referring to when the term is used later in the article.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin Diagram&lt;/th&gt;
&lt;th&gt;Photo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/74hc595shiftregister.png&#34; align=&#34;center&#34; width=&#34;600&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/74HC595Photo.png&#34; align=&#34;center&#34; width=&#34;370&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1636840974607&amp;ref_url=https%253A%252F%252Fwww.google.com%252F&#34;&gt;Image Credit: Texas Instruments&lt;/a&gt; (Left) and Author (Right)&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;The diagram at above left shows the pinouts for a SN74HC595 shift register. The photo at above right is in the same orientation as the pin diagram, namely GND is in the lower left, Vcc is in the upper right, and the &amp;ldquo;notch&amp;rdquo; is at the top center. The pins are defined as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pin 15&lt;/strong&gt; (right side, 2nd from the top), Qa, is the first output pin. Qa is also known as Q0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pins 1-7&lt;/strong&gt;, Qb-Qh, are the remaining output pins. Notice that there are 8 output pins (including Qa above). Having 8 outputs makes this an 8-bit shift register. Qb-Qh are also known as Q1-Q7.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 8&lt;/strong&gt;, GND is the ground pin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 16&lt;/strong&gt;, Vcc, is the power-in pin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 14&lt;/strong&gt;, SER, is the serial input pin. This is the pin that takes the incoming serial data pulses from the Raspberry Pi. This is sometimes referred to as DS, SI, or SDI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 11&lt;/strong&gt;, SRCLK, is the pin that accepts the synchronization signal that indicates 1 bit of data has been transmitted to the SER pin. This type of signal is called a clock. SRCLK stands for shift register clock. SRCLK is also known as sh_cp.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 12&lt;/strong&gt;, RCLK, is the pin that accepts the synchronization signal that indicates all 8 shift register bits have been populated and it&amp;rsquo;s time to transfer the bits, in parallel, to the output/storage register and thereby to the device connected to the output pins, Qa-Qh. RCLK is also known as st_cp or latch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 10&lt;/strong&gt;, SRCLR, is used to clear the current values of the shift register. SRCLR stands for shift register clear. SRCLR is also known as MR. If clearing the shift register is not required it can be connected to the power source which generates a HIGH signal (or 1). To clear the shift register the SRCLR pin is set to LOW (or 0). It must be set back to HIGH before the shift register is functional again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 13&lt;/strong&gt;, OE, is used to block the availability of the output or storage register. The OE pin&amp;rsquo;s effect is temporary. When it&amp;rsquo;s set to LOW (0) the data in the output register is accessible. When it&amp;rsquo;s HIGH(1) the data is not accessible. Setting it from HIGH to LOW makes the data once again accessible. Unlike the SRCLR pin, it does not clear the register. If disabling the output register is not required it can be connected to ground.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pin 9&lt;/strong&gt;, Qh&amp;rsquo;, is used to daisy chain multiple shift registers. For example, imagine a project that needed to control 16 LEDs in a parallel fashion. In this case a single 8-bit shift register is inadequate, we need 2 that can communicate in some manner. We can get the other required 8 bits from a second 8-bit shift register. To link the 2 shift registers we connect the Qh&amp;rsquo; output from the first, to pin 14, SER, on the second shift register. Daisy chaining shift registers is beyond the scope of this project, but you can read more about it on &lt;a href=&#34;https://www.electroschematics.com/multiple-shift-registers-arduino-part-1/&#34;&gt;Multiple Shift-out Registers on Arduino - part 1&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shift-register-in-operation&#34;&gt;Shift register in operation&lt;/h4&gt;
&lt;p&gt;As stated above, input data is stored in the input shift register. Data is transferred on each pulse of the SRCLK input. When an SRCLK input is received, data on a prior Q*&amp;rsquo; pin is shifted to the next Q*&amp;rsquo; register in the sequence. When the input shift register has been populated an RCLK signal causes all of the input register contents to be transferred to the output register. The following table illustrates this behavior. To keep things simple, I&amp;rsquo;m limiting the example to 4 bits, Qa* to Qd*. The input bit sequence will be &lt;code&gt;1011&lt;/code&gt;. The first bit, &lt;code&gt;1&lt;/code&gt;, will be transmitted at t0. The transmitted bits are indicated in parentheses next to the time indication (e.g., &lt;code&gt;t0(1)&lt;/code&gt;). The 4 bits become available at the output register on a signal from RCLK at t4.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SRCLK&lt;/th&gt;
&lt;th&gt;t0 (1)&lt;/th&gt;
&lt;th&gt;t1 (0)&lt;/th&gt;
&lt;th&gt;t2 (1)&lt;/th&gt;
&lt;th&gt;t3 (1)&lt;/th&gt;
&lt;th&gt;t4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Qa&amp;rsquo;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qb&amp;rsquo;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qc&amp;rsquo;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qd&amp;rsquo;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RCLK&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qa&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qc&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qd&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Notice that in the output sequence of bits, if the output bits are read from Qa to Qd, the bit sequence is reversed. That is, &lt;code&gt;1101&lt;/code&gt; vs. the input sequence of &lt;code&gt;1011&lt;/code&gt;. This manner of shifting is called Most Significant Bit (MSB) shifting. It starts with the leftmost bit as in this example. This must be kept in mind or unexpected results may occur. It is possible to shift in a more intuitive way, Least Significant Bit (LSB). To do this the shifting must start with the least, or rightmost, input bit. In C and Go, MSB shifting is done using the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; shift operator. LSB shifting is done by using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; shift operator. The impact of shift method will become more obvious when we get to how the shift register (not the input shift register) is used in conjunction with the 7-segment display. &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_numbering&#34;&gt;See Wikipedia for more about MSB and LSB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As noted previously, I simplified things a little bit when I stated above that only one Raspberry Pi GPIO pin is needed to drive the 8 LED segments in the 7-segment display. The one pin I identified is used for the SER (serial data in) pin. A minimum of 2 more are needed; 1 for the SRCLK pin and the other for the RCLK pins. As shown above these are required to advance the clock on the input shift register and transfer data from the input shift register to the output register respectively. So that&amp;rsquo;s now 3 pins to drive the 8 LEDs on the 7-segment display. This is still a good tradeoff. But 2 more GPIO pins are needed if the SRCLR and OE pins are needed. So now that&amp;rsquo;s 5 GPIO pins to drive 8 LED segments. Still a net gain of 3 pins. However, the savings become even greater when shift registers are daisy-chained as discussed above. Without requiring additional GPIO pins it is possible to control 16 or even more LEDs from those 5 GPIO pins. The savings become more significant as more devices, e.g., LEDs, need to be controlled.&lt;/p&gt;
&lt;h3 id=&#34;how-does-this-project-use-the-shift-register-and-7-segment-display&#34;&gt;How does this project use the shift register and 7-segment display?&lt;/h3&gt;
&lt;p&gt;This project uses the shift register component to capture serial input, accumulate it until 8 bits are written, and then make it available to the output register. Since the shift register component is wired to the 7-segment display, the contents of the output register are made available to the 7-segment display, controlling what is ultimately displayed. The details of the pin connections from the shift register component to the 7-segment display pins, coupled with the shift method used, MSB in this case, dictate what LEDs will be illuminated on the 7-segment display. The following table provides the specific pin assignments as well as what the final values at the output register will be given that the input number is &lt;code&gt;0x3f&lt;/code&gt;, &lt;code&gt;0011 1111&lt;/code&gt;, is used with MSB shifting.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;74HC595 pin&lt;/th&gt;
&lt;th&gt;7-segment display pin&lt;/th&gt;
&lt;th&gt;Final value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Qa&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qb&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qc&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qd&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qe&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qf&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qg&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qh&lt;/td&gt;
&lt;td&gt;DP&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using the diagrams below we can ascertain what number will be displayed at the 7-segment LED.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pinout diagram&lt;/th&gt;
&lt;th&gt;LED Identification diagram&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/7segmentdisplaypinout.png&#34; align=&#34;center&#34; width=&#34;150&#34;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/sevensegmentdisplaydiagram.png&#34; align=&#34;center&#34; width=&#34;200&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;Image Credit: Circuit Basics&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;7-segment display pins A-F will have the value 1, G and DP will have the values 0. Mapping this to the above LED Identification diagram we can see that the number displayed will be &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup-and-code&#34;&gt;Setup and Code&lt;/h2&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/breadboard.png&#34; align=&#34;center&#34; width=&#34;800&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder wiring diagram - &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Image Credit - Sunfounder&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/flatbreadboard2.png&#34; align=&#34;center&#34; width=&#34;800&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Actual wiring (mostly) - Image Credit: Author&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;The breadboard should be wired as illustrated in the above diagram &lt;em&gt;(as indicated in the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Sunfounder 7-Segment Display&lt;/a&gt; project documentation)&lt;/em&gt;. One very important thing to note, something that I spent way too much time debugging, is that the resistor connecting the ground pin on the 7-segment display must be connected to the ground or negative bus on the breadboard. In all my prior projects I&amp;rsquo;ve connected the resistor to the positive breadboard bus. I initially missed this detail and the 7-segment display didn&amp;rsquo;t display anything. One other thing I got wrong on the initial wiring is that I had the 74HC595 output register pins connected incorrectly to the 7-segment display. This is easy to do. I debugged this by noting which LED segments lit up for which expected number. After going through several numbers it became apparent that I had the &amp;lsquo;G&amp;rsquo; and &amp;lsquo;E&amp;rsquo; pins on the 7-segment display reversed.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re unfamiliar  with breadboards and breadboard diagrams this &lt;a href=&#34;https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard&#34;&gt;breadboard tutorial &lt;/a&gt; should be helpful.&lt;/p&gt;
&lt;h3 id=&#34;shift-register7-segment-display-in-c&#34;&gt;Shift Register/7-Segment Display in C&lt;/h3&gt;
&lt;p&gt;This code is quite different from the Sunfounder code. This is because I chose to add several capabilities including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Support for an interrupt handler. This will gracefully exit the program by clearing the input shift register thereby turning off all the LEDs. The Sunfounder program will leave the LEDs in whatever state they were in when that version exits.&lt;/li&gt;
&lt;li&gt;It supports setting both the SRCLR and OE shift register pins.&lt;/li&gt;
&lt;li&gt;It adds support for illuminating the decimal point in the 7-segment display.&lt;/li&gt;
&lt;li&gt;It add several functions that provide the ability to test different capabilities of the 74HC595 shift register including using the SRCLR and OE pins.&lt;/li&gt;
&lt;li&gt;It accepts user input from the keyboard allowing the user to specify how they&amp;rsquo;d like the program to drive the shift register and hence the LED. This includes things like clearing the input shift register, disabling and reenabling the output register as well as writing all hexadecimal digits/decimal point as well as writing an &lt;code&gt;8.&lt;/code&gt; to the display.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/84d8e9f350d19d184255adb3fb7ad93c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Most of this is pretty well explained by the embedded comments, but I&amp;rsquo;ll mention of few highlights.&lt;/p&gt;
&lt;p&gt;Lines 12 and 13 provide information on how to build and run the program.&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/sevensegdisplay/74hc595shiftregister.png&#34; align=&#34;center&#34; width=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;&lt;a href=https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1636840974607&amp;ref_url=https%253A%252F%252Fwww.google.com%252F&#34;&gt;Image Credit: Texas Instruments&lt;/a&gt;&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;Lines 27 and 28 define the GPIO pins that drive the SRCLR and OE pins respectively. Note that the GPIO pin numbers are the &lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; pin numbers. If you decide you want to see this behavior in action, wire pin 24 to the SRCLR shift register pin, and wire pin 29 to the OE shift register pin instead of positive and ground respectively.&lt;/p&gt;
&lt;p&gt;Lines 32 and 33 define an array, &lt;code&gt;SegCode&lt;/code&gt;, that contains the hexadecimal numbers that will be shifted into the shift register in order to display a number that matches the index of a particular number in the array. For example, to display an 8 &lt;code&gt;SegCode[8]&lt;/code&gt; should be used. Note that these numbers reflect the use of the MSB form of shifting. The numbers would be different if the LSB shifting form were used. For example, the number to use to display 0, as shown on line 32, is &lt;code&gt;0x3F&lt;/code&gt; (&lt;code&gt;0011 1111&lt;/code&gt;). To display 0 using the LSB method the hex number &lt;code&gt;0xFC&lt;/code&gt;(&lt;code&gt;1111 1100&lt;/code&gt;) and the C right-shift operator, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, should be used.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/f9f9d14b5405805f9f2ef31ec36d7c46.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This next code snippet shows the initialization of the shift register. In a nutshell, all the pins we&amp;rsquo;re using are placed in OUTPUT mode so we can write to them. Next, all pins except for the SRCLR pin are set to LOW (0). Recall that the SRCLR pin must be set to HIGH for the shift register to be operational.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative to pin mode OUTPUT is PWM (Pulse Width Modulation). Since PWM simulates lower voltages by rapidly pulsing the associated pin it&amp;rsquo;s not suitable for use with shift registers. Recall that a pulse to the SRCLK and RCLK pins represents a clock advancing. Using PWM, and the resulting rapid pulsing, would interfere with the clocks advancing in a reliable manner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/332b51486edd22771dda7bac8f88ae62.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This code snippet demonstrates 2 methods of turning off all the LEDs in the 7-segment display. Specifically, it shows how to use both the SRCLR pin and writing zeros to all the input shift register bits to clear the input shift register that will result in the 7-segment display showing nothing.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;shiftRegClr&lt;/code&gt;, lines 1 through 11, note the use of the RCLK pin on lines 4 and 6. The clock signal to that pin must be pulsed, i.e., set to HIGH followed by LOW, in order to make the input shift register contents available to the output register. Also note that the SRCLR pin needs to be reset to HIGH after the operation to reenable the shift register.&lt;/p&gt;
&lt;p&gt;Lines 16 through 28 show the method of writing zeros to all the input shift register bits to clear the input shift register (&lt;code&gt;zeroClear()&lt;/code&gt;). This is functionally equivalent to using the SRCLR method, they both set the input shift register bits to 0. It does take a lot more effort however. The &lt;code&gt;for&lt;/code&gt; loop in lines 18 through 23 shifts a zero into each bit of the input shift register. It repeats the process 8 times, advancing the SRCLK with each write, to fill the input shift register bits. Lines 20 and 22 send the SRCLK pulse to advance the input shift register bits. Strictly speaking, it&amp;rsquo;s not necessary to shift the &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; it to &lt;code&gt;0x80&lt;/code&gt; on line 19. It would be sufficient to merely write &lt;code&gt;0&lt;/code&gt; to the SDI pin. However, it is necessary to use this method of writing to the SDI pin write any other number, e.g., &lt;code&gt;0x3F&lt;/code&gt; into the input shift register.&lt;/p&gt;
&lt;p&gt;As with &lt;code&gt;shiftRegClr()&lt;/code&gt; above, lines 25 and 27 toggle the RCLK pin to transfer the bits to the output register.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/ce54e1d33e27f7005dcabfde0611f0e6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This next code snippet demonstrates how to light up all the LEDs, including the decimal point, as well as toggling the OE pin to temporarily disable the output register.&lt;/p&gt;
&lt;p&gt;Lines 3 through 15 show &lt;code&gt;writeAllOnes()&lt;/code&gt;. It&amp;rsquo;s implemented almost exactly like &lt;code&gt;zeroClear()&lt;/code&gt; above. The one notable exception is that it doesn&amp;rsquo;t left-shift the 1 and &lt;code&gt;&amp;amp;&lt;/code&gt; it to &lt;code&gt;0x80&lt;/code&gt; before writing it to the pin. This demonstrates that when all input shift register bits will have the same value, i.e., 1 or 0, it&amp;rsquo;s not necessary to do this. It does however repeat the process of writing to the pin 8 times, advancing the SRCLK clock after each write.&lt;/p&gt;
&lt;p&gt;Lines 22 through 29 implement &lt;code&gt;oeToggle()&lt;/code&gt;, which toggles the OE pin to HIGH (1) and then LOW again. There&amp;rsquo;s a 1 second delay between the writes to ensure that the effect is visible. Recall that setting to OE pin to HIGH is how the output register is disabled. From the observer&amp;rsquo;s perspective, the 7-segment display will turn off for 1 second and then be restored to whatever was being displayed prior to the toggling. It&amp;rsquo;s up to the calling function to decide what is displayed on the 7-segment display prior to calling this function.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/beb013db757698a7467564c6f118e99a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;hc595_shift()&lt;/code&gt; is responsible for shifting the various bits of the input number, &lt;code&gt;dat&lt;/code&gt;, into the input shift register. With the exception that the input number is variable based on what the value of &lt;code&gt;dat&lt;/code&gt; is, the function is implemented exactly like &lt;code&gt;zeroClr()&lt;/code&gt; above. In fact, both &lt;code&gt;zeroClr()&lt;/code&gt; and &lt;code&gt;writeAllOnes()&lt;/code&gt; can, and probably should have been, implemented using &lt;code&gt;hc595_shift()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For those that might have trouble imagining how the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; works in conjunction with the &lt;code&gt;&amp;amp;&lt;/code&gt; operator, like I did, here&amp;rsquo;s a short example using &lt;code&gt;0x3f&lt;/code&gt; or &lt;code&gt;0011 1111&lt;/code&gt; as an example. Note that the order of precedence of the operations is that &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; happens first followed by the &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;i&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;dat&lt;/code&gt; after shift&lt;/th&gt;
&lt;th&gt;&lt;code&gt;dat &amp;amp; 0x80&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;result written to the SDI pin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0011 1111&lt;/td&gt;
&lt;td&gt;0011 1111 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0111 1110&lt;/td&gt;
&lt;td&gt;0111 1110 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1111 1100&lt;/td&gt;
&lt;td&gt;1111 1100 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1111 1000&lt;/td&gt;
&lt;td&gt;1111 1000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1111 0000&lt;/td&gt;
&lt;td&gt;1111 0000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1110 0000&lt;/td&gt;
&lt;td&gt;1110 0000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1100 0000&lt;/td&gt;
&lt;td&gt;1100 0000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1000 0000&lt;/td&gt;
&lt;td&gt;1000 0000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0000 0000&lt;/td&gt;
&lt;td&gt;0000 0000 &amp;amp; 1000 0000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The last entry, &lt;code&gt;i = 8&lt;/code&gt;,  is what would happen if &lt;code&gt;dat&lt;/code&gt; was shifted 9 times instead of 8. This was included just to make it clear that &lt;code&gt;dat&lt;/code&gt; has been shifted 8 bits to the left leaving all 8 bits set to 0.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/ba2fdb83fa9819be02fb8237aa299fd1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Most of the functions in the above code snippet merely setup the test by setting the display to &lt;code&gt;8&lt;/code&gt;, and then delegate the behavior to the functions that we saw implemented above (e.g., &lt;code&gt;shiftRegCLr()&lt;/code&gt;). Instead of merely displaying an &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;testWriteNum()&lt;/code&gt; will rotate through all the hexadecimal numbers and decimal point.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/dc409c1a8995949b09f51baccdf81752.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Finally, this code snippet implements the &lt;code&gt;main()&lt;/code&gt; and &lt;code&gt;interruptHandler()&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;Line 3 registers a signal handler, &lt;code&gt;interruptHandler()&lt;/code&gt;, with interest in the &lt;code&gt;SIGINT&lt;/code&gt; signal. &lt;code&gt;SIGINT&lt;/code&gt; is what will be generated when &lt;code&gt;ctl-C&lt;/code&gt; is entered at the terminal.&lt;/p&gt;
&lt;p&gt;Lines 6 through 9 initialize the WiringPi library, exiting if the initialization fails.&lt;/p&gt;
&lt;p&gt;Line 16 prompts the user for what behavior they&amp;rsquo;d like to see demonstrated.&lt;/p&gt;
&lt;p&gt;Lines 17 through 25 first read the terminal input from the user and populate a null terminated string with the results. The code doesn&amp;rsquo;t care for any characters that might have been entered except the first character. Any additional characters between it and the newline will be ignored.&lt;/p&gt;
&lt;p&gt;Line 26 frees the memory allocated by &lt;code&gt;getline()&lt;/code&gt; on line 19. This is necessary to avoid memory leaks. Don&amp;rsquo;t worry if you don&amp;rsquo;t understand this. It&amp;rsquo;s not important to what&amp;rsquo;s being demonstrated in this program. If you&amp;rsquo;re interested, investigate memory allocation in C including how memory is allocated (&lt;code&gt;malloc&lt;/code&gt;), how it&amp;rsquo;s freed (&lt;code&gt;free&lt;/code&gt;), why this is important, and finally the operation of the &lt;code&gt;getline()&lt;/code&gt; function. Otherwise just remember it&amp;rsquo;s required.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;ASIDE: strictly speaking it&amp;rsquo;s not actually required in this program as the resulting memory leak is likely to be trivial in normal use. At a minimum it&amp;rsquo;s bad form to not &lt;code&gt;free&lt;/code&gt; all allocated memory when it&amp;rsquo;s no longer needed. At worst, the program can fail in various ways once all available memory has been allocated. So, call &lt;code&gt;free&lt;/code&gt; when the memory associated with a variable like &lt;code&gt;line&lt;/code&gt; is no longer needed.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation&#34;&gt;Wikipedia&lt;/a&gt; has a very detailed discussion about memory allocation and management.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lines 28 through 56 detect which option the user chose and call the function associated with that option. The entire process described from line 15 onwards is repeated until the user chooses the (q)uit option.&lt;/p&gt;
&lt;p&gt;Lines 63 through 67 register the signal handler that will gracefully exit the program if &lt;code&gt;ctl-C&lt;/code&gt; is entered at the terminal. It calls &lt;code&gt;toggle8()&lt;/code&gt; which briefly displays an &lt;code&gt;8&lt;/code&gt; before turning off all the LEDs in the 7-segment display.&lt;/p&gt;
&lt;h3 id=&#34;shift-register7-segment-display-in-go&#34;&gt;Shift Register/7-Segment Display in Go&lt;/h3&gt;
&lt;p&gt;The Go program is very similar to the C version. There are some minor differences in the implementation and the runtime output. Some of these differences are due to structural differences between the languages as well as differences in coding conventions. The snippets below represent most, but not all of the program. I left out some of the boiler plate and whitespace.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/372686065e31b4fcc896de3398e3a80a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;There are 4 major parts to this snippet. The first is the definition of the &lt;code&gt;segcode&lt;/code&gt; variable on line 3. It serves the same purpose as &lt;code&gt;SegCode&lt;/code&gt; in the C program, namely defining the values to be left-shifted into the shift register. One thing of note is that, as with the C version, these values are dependent on the use of Most Significant Bit shifting (MSB). For convenience, here&amp;rsquo;s the explanatory text from the C version:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SegCode&lt;/code&gt; &amp;hellip; contains the hexadecimal numbers that should be shifted into the shift register in order to display a number that matches the index of a particular number in the array. For example, to display an 8 &lt;code&gt;SegCode[8]&lt;/code&gt; should be used. Note that these numbers reflect the use of the MSB form of shifting. The numbers would be different if the LSB shifting form were used. For example, the number to use to display 0, as shown on line 32, is &lt;code&gt;0x3F&lt;/code&gt; (&lt;code&gt;0011 1111&lt;/code&gt;). To display 0 using the LSB method the hex number &lt;code&gt;0xFC&lt;/code&gt;(&lt;code&gt;1111 1100&lt;/code&gt;) and the C right-shift operator, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, should be used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Second, lines 7-13, in &lt;code&gt;main()&lt;/code&gt;, initialize the go-rpio library. Line 13 guarantees that the resources held by the go-rpio library will be released on program termination.&lt;/p&gt;
&lt;p&gt;Third, lines 15-20, create the go-rpio &lt;code&gt;rpio.Pin&lt;/code&gt; objects that are manipulated by the rest of the program.&lt;/p&gt;
&lt;p&gt;Finally, lines 22-35, define a signal/interrupt handler to catch &lt;code&gt;ctl-C&lt;/code&gt; inputs from the terminal. This is needed to gracefully exit the program if the user enters &lt;code&gt;ctl-C&lt;/code&gt; at the keyboard. A key point to notice in this snippet is the use of the channel named &lt;code&gt;stop&lt;/code&gt;. The signal/interrupt handler runs in its own goroutine (line 35). At this point there are 2 goroutines running, the &lt;code&gt;main()&lt;/code&gt; goroutine and the goroutine associated with the signal/interrupt handler. They are run and scheduled independently and as a result control can shift from one goroutine to another in arbitrary and unpredictable ways. In order to gracefully shutdown the program they must both be stopped in a controlled manner. Otherwise exiting the program would result in unpredictable behavior. For example, at program exit the 7-segment display might still have some illuminated LEDs. Synchronizing program exit using the &lt;code&gt;stop&lt;/code&gt; channel prevents this from happening. See the Tour of Go lessons on &lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;Goroutines&lt;/a&gt; and &lt;a href=&#34;https://tour.golang.org/concurrency/2&#34;&gt;Channels&lt;/a&gt; for a quick introduction to goroutines and channels. Don&amp;rsquo;t worry if you don&amp;rsquo;t quite understand all this, concurrency in Go is an advanced topic. Mostly I just wanted to provide a high level explanation of why the code is written this way.&lt;/p&gt;
&lt;p&gt;The program comments provide additional detail. The rest of &lt;code&gt;main()&lt;/code&gt; is in the following snippet.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/84ed027cd69b1682444466703b2c699a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The rest of &lt;code&gt;main()&lt;/code&gt; as shown above handles prompting the user about what capability they&amp;rsquo;d like to see demonstrated is fairly self-explanatory. One thing to point out though is the &lt;code&gt;for/select&lt;/code&gt; loop starting in lines 2-8. &lt;code&gt;for/select&lt;/code&gt; is a common pattern used in Go programs. It&amp;rsquo;s use here goes back to the the prior discussion about the &lt;code&gt;stop&lt;/code&gt; channel. The &lt;code&gt;select&lt;/code&gt; part of the &lt;code&gt;for/select&lt;/code&gt; pattern is listening on the &lt;code&gt;stop&lt;/code&gt; for the message indicating this goroutine should exit. Notice the &lt;code&gt;select&lt;/code&gt; had 2 &lt;code&gt;case&lt;/code&gt; choices. The first is for listening to the &lt;code&gt;stop&lt;/code&gt; channel. If a message is received the &lt;code&gt;for&lt;/code&gt; loop, and program, will exit. If no message is received then control will immediately pass to the &lt;code&gt;default&lt;/code&gt; case, continuing with normal program flow. In the &lt;code&gt;default&lt;/code&gt; case the user is prompted, in lines 18-57, for their choice which will result in one of the test functions being called.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/61200f26ffe1211c8b09efb87a6b82d8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;There are 3 parts to this next code snippet. The first is the creation of the go-rpio &lt;code&gt;rpio.Pin&lt;/code&gt; objects that represent the logical connection to the shift register&amp;rsquo;s physical pins. The GPIO/BCM pins 17, 18, 27, 19, and 21 are used for the SDI, RCLK, SRCLK, SRCLR, and OE pins respectively.&lt;/p&gt;
&lt;p&gt;The second part sets the pins to OUTPUT mode so that they can be written to.&lt;/p&gt;
&lt;p&gt;The final part sets the voltage on the pins to their initial values. Note the the SRCLR pin is set to HIGH. This is required in order for the shift register to work. In later code snippets we&amp;rsquo;ll see that clearing the input shift register is accomplished by setting the SRCLR pin to LOW to clear the input shift register, and then back to HIGH to reenable the normal operation of the shift register.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/7898d5147333eefb86a45494c5e7e189.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This code snippet shows the implementation of the test functions that are called in response to users&amp;rsquo; choices regarding what capability they&amp;rsquo;d like to see demonstrated.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/d81ec6100f22e48b25ab536ce115fe56.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This code snippet shows the implementation of the function that&amp;rsquo;s the heart of the program, &lt;code&gt;hc595_shift()&lt;/code&gt;, which does the actual writing to the input shift register. The comments provide a good detailed explanation of what the function does.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/4fa966a3ff8ed3e550feca78bab2baa3.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This final code snippet shows the implementation of 2 helper functions and the signal/interrupt handler. The first helper function, &lt;code&gt;writeNums()&lt;/code&gt;, writes the actual data needed to illuminate the hexadecimal numbers on the 7-segment display. The second, &lt;code&gt;shiftRegClr()&lt;/code&gt;, shows how to use the combination of the SRCLR and RCLK pins to clear the shift register ultimately clearing the 7-segment display. Note that, as described above, the SRCLR pin needs to be set back to HIGH in order to reenable the shift register.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;shiftRegClr&lt;/code&gt;, lines 12 through 18, note the use of the RCLK pin on lines 14 and 16. The clock signal to that pin must be pulsed, i.e., set to HIGH followed by LOW, in order to make the input shift register contents available to the output register. Also note that the SRCLR pin needs to be reset to HIGH after the operation to reenable the shift register.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;signalHandler()&lt;/code&gt; function catches the signal from the OS (line 23) via the &lt;code&gt;sigs&lt;/code&gt; channel. Then on (line 25) it closes the stop channel. A side effect of closing a channel is a notification is sent to all listeners on the other end of the channel. This is a common pattern in Go. Finally it clears the shift register, releases go-rpio resources (line 28). Line 30 releases the resources held by the go-rpio library. Finally, the program exits on line 32.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This article has covered quite a bit of ground. If you&amp;rsquo;ve been following my series starting with the &lt;a href=&#34;https://youngkin.github.io/post/sunfoundergpionotesled/&#34;&gt;Raspberry Pi GPIO in Go and C - Blinking LED&lt;/a&gt; project, you&amp;rsquo;re already familiar with using GPIO to drive LEDs. You might agree that the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Sunfounder 7-Segment Display&lt;/a&gt; project didn&amp;rsquo;t really add to your knowledge of GPIO and LEDs that hasn&amp;rsquo;t already been covered in previous projects. So this is why, for me anyway, this project is really about learning shift register fundamentals and using them in a non-trivial way.&lt;/p&gt;
&lt;p&gt;This article covered several interesting things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It demonstrated wiring up a relatively complex circuit on a breadboard. As I did, you might have made some mistakes along the way that gave you some useful knowledge of how to debug circuits.&lt;/li&gt;
&lt;li&gt;Through an academic discussion and hands-on practice you&amp;rsquo;ve learned quite a bit about shift registers and what they can be used for.&lt;/li&gt;
&lt;li&gt;Despite my somewhat trivializing the use of LEDs in this project, this project did shed light on how to use LEDs in a more realistic manner. Controlling an individual LED is interesting, but being able to control an array of LEDs in parallel and display digits on that array is a big step forward. You also learned that there are 2 types of 7-segment displays, common anode and common cathode.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comments and questions about this article are welcome.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.4_7-segment_display_c.html&#34;&gt;Sunfounder 7-Segment Display&lt;/a&gt; project documentation.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://docs.sunfounder.com/projects/electronic-kit/en/latest/lesson_19_7-segment.html&#34;&gt;Sunfounder 7-Segment Python&lt;/a&gt; project contains some additional information not available in the C version of the project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pinout.xyz/&#34;&gt;Raspberry Pi GPIO Pinout diagram&lt;/a&gt; including the physical board pin numbers, the BCM/GPIO pin numbers, and the WiringPi pin numbers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allaboutcircuits.com/textbook/digital/chpt-12/serial-in-parallel-out-shift-register/&#34;&gt;Shift Registers: Serial-in, Parallel-out (SIPO) Conversion&lt;/a&gt; is a good resource for getting a detailed introduction to shift registers in general, and the 74HC595 shift register in particular.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1636840974607&amp;amp;ref_url=https%253A%252F%252Fwww.google.com%252F&#34;&gt;Texas Instruments CD74HC595 Datasheet&lt;/a&gt; contains some interesting information including a timing diagram.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.circuitbasics.com/arduino-7-segment-display-tutorial/&#34;&gt;How to set up seven segment displays on the Arduino&lt;/a&gt; provides an example of a 7-segment LED project that doesn&amp;rsquo;t use a shift register. It also has some other useful information such as how to determine whether a 7-segment display is a common cathode or common anode display.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; library for C&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiringpi.com/&#34;&gt;WiringPi website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; library for Go&lt;/li&gt;
&lt;li&gt;Other articles in my &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;Raspberry Pi GPIO series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;The gpio repository&lt;/a&gt; containing the code for this article&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;How to setup a new Raspberry Pi from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard&#34;&gt;How to use a breadboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi GPIO in Go and C - LED Bar Graph</title>
      <link>https://youngkin.github.io/post/ledbargraph/</link>
      <pubDate>Mon, 08 Nov 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/ledbargraph/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is the fourth article in a series that explores GPIO programming on a Raspberry Pi 3B+. It is a supplement to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.3_led_bar_graph_c.html&#34;&gt;Sunfounder LED Bar Graph&lt;/a&gt; project. You can find the full series &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;here&lt;/a&gt;. The code for the series can be found in my &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;gpio repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.3_led_bar_graph_c.html&#34;&gt;Sunfounder LED Bar Graph&lt;/a&gt; project provides very good documentation regarding how to set up the project as well as describing the C code. This article is more geared towards describing what an LED bar graph is, what it&amp;rsquo;s good for, and how to control an LED bar graph using Go as well as C.&lt;/p&gt;
&lt;p&gt;LED bar graphs consist of several LEDs embedded into a single component. In the picture below the bar graph contains 10 LEDs arranged side-by-side.&lt;/p&gt;
&lt;img style=&#34;border:1px solid white; padding: 15px;&#34; src=&#34;https://youngkin.github.io/images/ledbargraph/bargraphimage.png&#34; align=&#34;center&#34; width=&#34;800&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;LED Bar Graph&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
LED bar graphs have several uses including:
&lt;ul&gt;
&lt;li&gt;Progress indicators&lt;/li&gt;
&lt;li&gt;Battery charge&lt;/li&gt;
&lt;li&gt;Voltmeter&lt;/li&gt;
&lt;li&gt;Sound meter&lt;/li&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, just about anything that requires an indication of a value at a relative position on a scale can be represented by an LED bar graph.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This section is repeated in all articles in my &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;Raspberry Pi GPIO series&lt;/a&gt;. If you&amp;rsquo;ve already completed a project from one of these articles you can skim this section for required items not included in other projects (e.g., an LED Bar Graph).&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, you&amp;rsquo;ll need a Raspberry Pi. I used a Raspberry Pi 3B+ with the &amp;lsquo;Stretch&amp;rsquo; version of the Raspbian OS. The Raspberry Pi website has instructions on how to &lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;setup a new Raspberry Pi from scratch&lt;/a&gt; if you decide to go that way vs. buying a complete kit.&lt;/p&gt;
&lt;p&gt;Other items you&amp;rsquo;ll need include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/dp/B082KBF7MM/ref=sspa_dk_detail_4?psc=1&amp;amp;pd_rd_i=B082KBF7MM&amp;amp;pd_rd_w=1tGTV&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=fX8JB&amp;amp;pf_rd_r=44DE0RS1E9FD42RBYC7R&amp;amp;pd_rd_r=47cbdc7f-7834-455f-9429-ef74a438bd45&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVVkdZVUZRNUw3ODkmZW5jcnlwdGVkSWQ9QTA4MzI4MzYyU0VLNzBJM0cxRUVMJmVuY3J5cHRlZEFkSWQ9QTA0Mjk1NTMzSzNSWlNFUjU0NURBJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;breadboard&lt;/a&gt; &lt;em&gt;(You may find &lt;a href=&#34;http://wiki.sunfounder.cc/index.php?title=Breadboard_Basics_%E2%80%93_Types&#34;&gt;this tutorial on breadboards&lt;/a&gt; helpful)&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;some &lt;a href=&#34;https://www.amazon.com/dp/B08HZ26ZLF/ref=syn_sd_onsite_desktop_19?psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExRFpLWElCRjg1MUNMJmVuY3J5cHRlZElkPUEwMjMyMTE1M01aOFE3U1BQS09YSiZlbmNyeXB0ZWRBZElkPUEwODE5NTMxMktEMTlZRjEyQjBJNiZ3aWRnZXROYW1lPXNkX29uc2l0ZV9kZXNrdG9wJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;jumper wires&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;10 &lt;a href=&#34;https://www.amazon.com/Resistor-Tolerance-Resistors-Assortment-Certificated/dp/B08QR72BFW/ref=sr_1_8?crid=1E3LWKK431TDV&amp;amp;keywords=resistor+assortment&amp;amp;qid=1636936543&amp;amp;qsid=143-6049131-7886617&amp;amp;s=industrial&amp;amp;sprefix=resistor%2Cindustrial%2C203&amp;amp;sr=1-8&amp;amp;sres=B085NQZNTY%2CB072BL2VX1%2CB07N1ZK8CC%2CB098BKR447%2CB08QR72BFW%2CB07L851T3V%2CB09CZ18Z31%2CB08PF3HNMD%2CB07D54XMFK%2CB088WQMNYK%2CB08NY3XR96%2CB06WRQS97C%2CB07PXYVP3J%2CB07D2Z45CG%2CB089Q88QPN%2CB08ZRYH9VC%2CB08FD1XVL6%2CB08QRH6HFT%2CB07PTNN78Z%2CB07P3MFG5D&#34;&gt;220 Ohm resistors&lt;/a&gt; - this set actually has an assortment of resistors including 220 Ohm resistors.&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/10-Segment-LED-BAR-Graph-Indicator/dp/B0155SPLN2/ref=pd_sbs_3/143-6049131-7886617?pd_rd_w=1Ex07&amp;amp;pf_rd_p=0a3ad226-8a77-4898-9a99-63ffeb1aef90&amp;amp;pf_rd_r=PSA6XYZEJZTWWA8QVHG1&amp;amp;pd_rd_r=63d233c3-3180-4b34-8452-eee71e2cc984&amp;amp;pd_rd_wg=GSCIp&amp;amp;pd_rd_i=B0155SPLN2&amp;amp;psc=1&#34;&gt;10 segment LED Bar Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You should also consider getting a &lt;a href=&#34;https://www.amazon.com/dp/B082PRVRYR/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B082PRVRYR&amp;amp;pd_rd_w=8mKhr&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=e9psa&amp;amp;pf_rd_r=S09F37DF2G5FW8B8GX4B&amp;amp;pd_rd_r=c065c120-e60b-45e9-b93b-f581f048cf46&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFCMzhUQ09COFI2VlMmZW5jcnlwdGVkSWQ9QTA5NjU2ODUxRDkxNEYwSTYwV09KJmVuY3J5cHRlZEFkSWQ9QTAxOTg1MTUyRUhEUlc2VzQ2VDQ4JndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;40 pin female to female with a T-Type adapter&lt;/a&gt; to attach the GPIO outputs to the breadboard. You can use only jumper wires, but the T-Type adapter will make things easier and will help prevent damage to the GPIO pins on the Raspberry Pi. If you elect not to buy the 40 pin cable with T-Type adapter you&amp;rsquo;ll need to buy &lt;a href=&#34;https://www.amazon.com/SinLoon-Breadboard-Arduino-Circuit-40-Pack/dp/B08M3QLL3Q/ref=pd_sbs_7/143-0445142-7950409?pd_rd_w=sVLrc&amp;amp;pf_rd_p=8b76d7a7-ab83-4ddc-a92d-e3e33bfdbf03&amp;amp;pf_rd_r=CDM5TGJT03VKF0ZFB577&amp;amp;pd_rd_r=8e58fd82-8503-41cf-b8f2-c78eaeb78d25&amp;amp;pd_rd_wg=tT1U0&amp;amp;pd_rd_i=B08M3QLL3Q&amp;amp;psc=1&#34;&gt;male-to-female jumper wires&lt;/a&gt;. Buying all these things separately will cost more than a kit however.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/dp/B06WP7169Y/ref=sspa_dk_detail_5?psc=1&amp;amp;pd_rd_i=B06WP7169Y&amp;amp;pd_rd_w=OZVyf&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=0V0IH&amp;amp;pf_rd_r=623YJTBQ2CN2B2GYXQG5&amp;amp;pd_rd_r=faa61f0f-3aec-4cf0-8e7e-d44eb1b3b92f&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyUVlDQzMzVVZBMFYxJmVuY3J5cHRlZElkPUEwMzExNzk4MUhGSjFSS0VKTlBROCZlbmNyeXB0ZWRBZElkPUEwMzYwNjg2UUdMRU44N0YzNzIwJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;Here&amp;rsquo;s a simple kit that has all of the above&lt;/a&gt;. I&amp;rsquo;m finding the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt; especially useful. NOTE: The Ultimate Starter Kit and the Raphael Kit are the same product.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RaphaelKit.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Ultimate Starter/Raphael kit&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;You will also need some basic C  and Go programming knowledge as well as familiarity with logging on to a Raspberry Pi terminal, or into the desktop GUI that comes with some OS versions. Depending on the approach you take, you may need to connect a keyboard and monitor to the Raspberry Pi. I simply SSH into the Pi. You&amp;rsquo;ll also need familiarity with how to use an editor like vim or nano.&lt;/p&gt;
&lt;p&gt;To compile and run the C program you&amp;rsquo;ll need the &lt;a href=&#34;https://github.com/WiringPi&#34;&gt;WiringPi&lt;/a&gt; library. It&amp;rsquo;s easy to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install wiringpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then test the installation using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi@pi-node1:~/go/src/github.com/youngkin/gpio/rgbled $ gpio -v
gpio version: 2.50
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3B+, Revision: 03, Memory: 1024MB, Maker: Sony
  * Device tree is enabled.
  *--&amp;gt; Raspberry Pi &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above you&amp;rsquo;ll notice &lt;code&gt;gpio version: 2.50&lt;/code&gt;. If you&amp;rsquo;re using a Rasberry Pi 4, use the instructions given in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/check_the_wiringpi_c.html&#34;&gt;Checking the WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;WiringPi is unique in that it includes a command line tool, &lt;code&gt;gpio&lt;/code&gt;, as shown above, that can be used to manage, control, and query the GPIO board. This can be very handy. See the &lt;a href=&#34;http://wiringpi.com/the-gpio-utility/&#34;&gt;gpio reference&lt;/a&gt; for more information on what it can do and how to use it.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Go development on a Raspberry Pi you&amp;rsquo;ll need to install the development environment onto the Raspberry Pi. &lt;a href=&#34;https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/&#34;&gt;Here&amp;rsquo;s a simple source&lt;/a&gt; that explains how to accomplish this. This source is a little dated, but the only significant issue is with the version of Go to install. The source shows installing Go &lt;strong&gt;1.14.4.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.14.4.linuxarmv6l.tar.gz&lt;/strong&gt;. The current versions are &lt;strong&gt;1.17.1.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. For the Raspberry Pi 3B+ the correct choice will be &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. The other is intended for 64 bit systems like the Raspberry Pi 4 series. You can find current ARM versions of Go at the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang download site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Go development you&amp;rsquo;ll also need the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;If you want to veer away from the cookbook style of the Sunfounder docs you&amp;rsquo;ll need some basic knowledge of Linux . For example, I won&amp;rsquo;t be explaining what &lt;strong&gt;root privileges&lt;/strong&gt; are.&lt;/p&gt;
&lt;h2 id=&#34;setup-and-code&#34;&gt;Setup and Code&lt;/h2&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/ledbargraph/breadboard.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder wiring diagram&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/ledbargraph/ledbargraph.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Actual wiring&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;The breadboard should be wired as illustrated in the above diagram. If you&amp;rsquo;re unfamiliar  with breadboards and breadboard diagrams this &lt;a href=&#34;https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard&#34;&gt;breadboard tutorial &lt;/a&gt; should be helpful.&lt;/p&gt;
&lt;p&gt;One thing to note about the wiring diagram is that the resistors are all attached to the breadboard&amp;rsquo;s positive power bus on one side and the positive terminals of the LED bar graph on the other (&lt;em&gt;Label Side&lt;/em&gt;). This means the LED bar graph is always getting power. In order for power to flow through a component one of the component&amp;rsquo;s terminals must be receiving power and the other must either not be receiving power or be connected to a negative or ground terminal. As noted, the resistors are directly attached to the power bus. In this diagram the GPIO pins are connected to the bar graph&amp;rsquo;s negative terminals. GPIO pins are set to either &lt;strong&gt;HIGH&lt;/strong&gt; or &lt;strong&gt;LOW&lt;/strong&gt; when in output mode &lt;em&gt;(i.e., the pins are written to)&lt;/em&gt;. &lt;strong&gt;HIGH&lt;/strong&gt; means voltage is flowing to the pin, &lt;strong&gt;LOW&lt;/strong&gt; means no voltage is flowing to the pin. Since completing a circuit requires one side of the circuit to have zero volts, and the bar graph is always receiving power via the power bus, the GPIO pins must be set to &lt;strong&gt;LOW&lt;/strong&gt; voltage for current to flow and the LEDs to illuminate. In the code sections below, the LEDs are set to &lt;strong&gt;LOW&lt;/strong&gt; when the LEDs should be illuminated.&lt;/p&gt;
&lt;h3 id=&#34;led-bar-graph-in-c&#34;&gt;LED Bar Graph in C&lt;/h3&gt;
&lt;p&gt;The code for this program can be found in the &lt;a href=&#34;https://github.com/youngkin/gpio/blob/main/ledbargraph/ledbargraph.c&#34;&gt;ledbargraph.c&lt;/a&gt; file in the &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;github respository&lt;/a&gt; accompanying this series. It substantially similar to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.3_led_bar_graph_c.html&#34;&gt;Sunfounder program&lt;/a&gt;, but there are some important differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This program includes an initialization function that turns all the LEDs on then off prior to continuing with the remainder of the program. This can be useful to verify that the LED bar graph is wired up correctly.&lt;/li&gt;
&lt;li&gt;This program includes an interrupt handler that cleans up when the program is interrupted via entering &lt;code&gt;ctl-C&lt;/code&gt; at the terminal. The Sunfounder code does not. This cleanup includes resetting the bar graph to its state prior to the program starting, e.g., turning all the LEDs off.&lt;/li&gt;
&lt;li&gt;Finally, this program also includes a function that randomly lights individual LEDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The major parts of the program are described in more detail below. The code is pretty well described in the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.3_led_bar_graph_c.html&#34;&gt;Sunfounder article&lt;/a&gt; so I won&amp;rsquo;t repeat what&amp;rsquo;s already covered there.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/d3870141ea2a8de68cad62135fa488ed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Lines 9 &amp;amp; 10 show how to build and run the program. Line 19 declares the interrupt handler that&amp;rsquo;s used to intercept &lt;code&gt;ctl-C&lt;/code&gt; input from the terminal. The rest of this section shows the &lt;code&gt;init()&lt;/code&gt; function I added. It iterates through the &lt;code&gt;pins&lt;/code&gt; array and first sets all the pins to &lt;code&gt;LOW&lt;/code&gt; which has the effect of lighting them up. They&amp;rsquo;re set to &lt;code&gt;LOW&lt;/code&gt; because the positive terminals of the LED bar graph are connected to the positive power bus. The pins are connected to the negative terminals of the bar graph. To get current to flow the pin states must be set to 0 volts, or &lt;code&gt;LOW&lt;/code&gt;. The bar graph stays lit for 500 microseconds, then the LEDs are turned off, then there&amp;rsquo;s another delay of 500 microseconds before the program continues. The delays provide enough time to see the entire bar graph light up then turn off before the program continues. This provides a visual indication that the bar graph is connected properly.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/7c1b89402b9e73cbf4d1e86995472a7b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This next section contains the functions that control the bar graph LEDs. The &lt;code&gt;oddLedBarGraph()&lt;/code&gt;, &lt;code&gt;evenLedBarGraph()&lt;/code&gt;, and &lt;code&gt;allLedBarGraph()&lt;/code&gt; functions are taken directly from the Sunfounder code. I added the &lt;code&gt;randomBarGraph()&lt;/code&gt; function on lines 1 - 12 just to make things more interesting. It uses the C standard library &lt;code&gt;rand()&lt;/code&gt; function, line 5, to generate a random number that is adjusted on line 6 to be within the range of the &lt;code&gt;pins&lt;/code&gt; array, offsets 0 through 9. That resulting number is used as the offset in the array to find the pin to be toggled (lines 7 and 9). There is a very brief delay between lighting the individual LEDs.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/95819fcaa718f6fcc5f55821e63431b2.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This last section of code shows the &lt;code&gt;main()&lt;/code&gt; function and the interrupt handler, &lt;code&gt;interruptHandler()&lt;/code&gt;. With the exception of the addition of lines 3, 18, and 19, &lt;code&gt;main()&lt;/code&gt; is identical to the Sunfounder code. Line 3 registers the &lt;code&gt;interruptHandler()&lt;/code&gt; function to receive the &lt;code&gt;SIGINT&lt;/code&gt; signal associated with entering &lt;code&gt;ctl-C&lt;/code&gt; at the terminal.&lt;/p&gt;
&lt;p&gt;Lines 26 through 34 define the &lt;code&gt;interruptHandler()&lt;/code&gt; function. It&amp;rsquo;s parameter, sig, contains the integer value of the signal being passed to the function. In our case it doesn&amp;rsquo;t matter what signal is passed, it&amp;rsquo;ll exit the program in any case.&lt;/p&gt;
&lt;p&gt;Lines 27 thorugh 30 iterate through the &lt;code&gt;pins&lt;/code&gt; array making sure each pin is set to &lt;code&gt;OUTPUT&lt;/code&gt; mode, i.e., it can be written to, and setting it&amp;rsquo;s value to &lt;code&gt;HIGH&lt;/code&gt;. Recall from above that setting the pin to &lt;code&gt;LOW&lt;/code&gt; will light the pin, setting it to &lt;code&gt;HIGH&lt;/code&gt; will turn it off.&lt;/p&gt;
&lt;p&gt;Finally, the program exits on line 33 with a &amp;ldquo;success&amp;rdquo;, 0, exit code.&lt;/p&gt;
&lt;h3 id=&#34;led-bar-graph-in-go&#34;&gt;LED Bar Graph in Go&lt;/h3&gt;
&lt;p&gt;The code for this program can be found in the &lt;a href=&#34;https://github.com/youngkin/gpio/blob/main/ledbargraph/ledbargraph.go&#34;&gt;ledbargraph.go&lt;/a&gt; file in the &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;github respository&lt;/a&gt; accompanying this series. This program in this section is very similar to its C counterpart above. There are some minor differences however. It doesn&amp;rsquo;t include functions to light the even and odd numbered LEDs. The major parts of the program are described in more detail below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/83522e2fcba8b95bb29635743635ddb1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Line 6 provides the command to run the program. Lines 34 and 35, set up the slices that will contain the pin numbers and the associated go-rpio &lt;code&gt;rpio.Pin&lt;/code&gt; instances. Line 33 shows the comparable WiringPi pin numbers as a cross-reference.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/gpio_extension_board.html&#34;&gt;Sunfounder GPIO Extension Board diagram&lt;/a&gt; doesn&amp;rsquo;t show the GPIO pins associated with SDA1, SCL1, and SPICE0 pins. The &lt;a href=&#34;https://pinout.xyz/&#34;&gt;Raspberry Pi Pinout diagram&lt;/a&gt; does. Using this reference we can see that SDA1 maps to GPIO pin 2, SCL1 maps to GPIO pin 3, and SPICE0 maps to GPIO pin 8.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/c3d7ff9785e4f201937f52e806c4e9ac.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This next part of the program shows the &lt;code&gt;init&lt;/code&gt; function. Lines 4 - 9 create &lt;code&gt;rpio.Pin&lt;/code&gt; instances, define the pins as &lt;code&gt;rpio.OUTPUT&lt;/code&gt; pins, and append them to the &lt;code&gt;gpins&lt;/code&gt; slice defined in the first part of the program. Lines 10 - 13 set the pins to &lt;code&gt;LOW&lt;/code&gt; state, lighting them up. Recall the discussion about the C program above that describes why the pins are set to &lt;code&gt;LOW&lt;/code&gt;. Line 14 briefly pauses the program so the effect of lighting them up can be seen. Finally lines 15 - 17 turn the pins off by setting them to &lt;code&gt;HIGH&lt;/code&gt;.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/c56a1e306dc1cbf2eb1469d2f25715ed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This part of the program contains the &lt;code&gt;randBarGraph()&lt;/code&gt; and &lt;code&gt;ledAll()&lt;/code&gt; functions. Line 3 seeds the Go random number generator which is used in line 9 to generate the pin number to be lit. Lines 5 - 15 and lines 22 - 30 contain Go &lt;code&gt;select&lt;/code&gt; blocks which are used to make sure the 2 functions will exit if a &lt;code&gt;ctl-C&lt;/code&gt; signal is received from the terminal. Specifically, line 6 and 23 receive the stop command via the &lt;code&gt;stop&lt;/code&gt; channel and lines 7 &amp;amp; 24 exit the functions. The rest of the code is self-explanatory, the LEDs are turned on and off.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/78167aa8d18574e24f2a36af749f1d2b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This final part of the program contains the &lt;code&gt;main()&lt;/code&gt; and the &lt;code&gt;signalHandler()&lt;/code&gt; functions. Lines 11 &amp;amp; 15 create unbuffered Go channels. The &lt;code&gt;stop&lt;/code&gt; channel is used to signal other parts of the program that the program is exiting. This is needed because the &lt;code&gt;signalHandler()&lt;/code&gt; is started in a separate goroutine on line 21. It must be able to stop the main goroutine before exiting the program. The &lt;code&gt;stop&lt;/code&gt; channel is defined as taking an &lt;code&gt;interface{}&lt;/code&gt; type. This means that the channel can contain any type. For this channel the type of the data sent isn&amp;rsquo;t important.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sigs&lt;/code&gt; channel, defined on line 15, is used by the Go runtime to notify the &lt;code&gt;signalHandler()&lt;/code&gt; that an interrupt signal has been received. &lt;code&gt;signalHandler()&lt;/code&gt; is registered with the Go runtime on line 20. Line 21 starts the goroutine that will run &lt;code&gt;signalHandler()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The rest of &lt;code&gt;main()&lt;/code&gt; simply initializes the pins and runs the controlling functions.&lt;/p&gt;
&lt;p&gt;LInes 28 - 42 contain the definition of &lt;code&gt;signalHandler()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This brief article provided a quick overview of the LED bar graph component and its application in the real world. It also included some C code that wasn&amp;rsquo;t included in the original Sunfounder program. This additional code is used to show how to turn on the different LEDs in random fashion. Finally an implementation of this same C program was provided in Go. This was meant to demonstrate the usage of how use the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; library implements functionality similar to &lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully you&amp;rsquo;ve learned enough from this article to use LED bar graphs in your own applications.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.3_led_bar_graph_c.html&#34;&gt;Sunfounder LED Bar Graph&lt;/a&gt; project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/gpio_extension_board.html&#34;&gt;Sunfounder GPIO Extension Board diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pinout.xyz/&#34;&gt;Raspberry Pi Pinout diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; library for C&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiringpi.com/&#34;&gt;WiringPi website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; library for Go&lt;/li&gt;
&lt;li&gt;Other articles in my &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;Raspberry Pi GPIO series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;The gpio repository&lt;/a&gt; containing the code for this article&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;How to setup a new Raspberry Pi from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard&#34;&gt;How to use a breadboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi GPIO in Go and C - RGB LED</title>
      <link>https://youngkin.github.io/post/sunfoundergpionotesrgbled/</link>
      <pubDate>Mon, 01 Nov 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/sunfoundergpionotesrgbled/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is the third article in a series that explores GPIO programming on a Raspberry Pi 3B+. The first is &lt;a href=&#34;https://youngkin.github.io/post/sunfoundergpionotesled/&#34;&gt;Raspberry Pi GPIO in Go and C - Blinking LED&lt;/a&gt;. It is a supplement to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;Sunfounder RGB LED&lt;/a&gt; project. You can find the full series &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article explores the use of Pulse Width Modulation (PWM) to drive an RGB LED, as well as how to control an individual LED pin&amp;rsquo;s brightness. The code samples will be in Go and C.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, you&amp;rsquo;ll need a Raspberry Pi. I used a Raspberry Pi 3B+ with the &amp;lsquo;stretch&amp;rsquo; version of the Raspbian OS. Given that the Sunfounder Ultimate Starter Kit is advertised to work with a Raspberry Pi 4, I would expect the 4 series to work as well. I&amp;rsquo;m less sure about other Raspberry Pi versions, especially versions with 26 vs. 40 GPIO pins.&lt;/p&gt;
&lt;p&gt;Next you&amp;rsquo;ll need&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.amazon.com/dp/B082KBF7MM/ref=sspa_dk_detail_4?psc=1&amp;amp;pd_rd_i=B082KBF7MM&amp;amp;pd_rd_w=1tGTV&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=fX8JB&amp;amp;pf_rd_r=44DE0RS1E9FD42RBYC7R&amp;amp;pd_rd_r=47cbdc7f-7834-455f-9429-ef74a438bd45&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVVkdZVUZRNUw3ODkmZW5jcnlwdGVkSWQ9QTA4MzI4MzYyU0VLNzBJM0cxRUVMJmVuY3J5cHRlZEFkSWQ9QTA0Mjk1NTMzSzNSWlNFUjU0NURBJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;breadboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some &lt;a href=&#34;https://www.amazon.com/dp/B08HZ26ZLF/ref=syn_sd_onsite_desktop_19?psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExRFpLWElCRjg1MUNMJmVuY3J5cHRlZElkPUEwMjMyMTE1M01aOFE3U1BQS09YSiZlbmNyeXB0ZWRBZElkPUEwODE5NTMxMktEMTlZRjEyQjBJNiZ3aWRnZXROYW1lPXNkX29uc2l0ZV9kZXNrdG9wJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;jumper wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.amazon.com/EDGELEC-Tri-Color-Multicolor-Diffused-Resistors/dp/B077XGF3YR/ref=asc_df_B077XGF3YR/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=242051162351&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=11064062033670066895&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=9028749&amp;amp;hvtargid=pla-430228081645&amp;amp;psc=1&#34;&gt;220 Ohm resistor, and a RGB LED&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should also consider getting a &lt;a href=&#34;https://www.amazon.com/dp/B082PRVRYR/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B082PRVRYR&amp;amp;pd_rd_w=8mKhr&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=e9psa&amp;amp;pf_rd_r=S09F37DF2G5FW8B8GX4B&amp;amp;pd_rd_r=c065c120-e60b-45e9-b93b-f581f048cf46&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFCMzhUQ09COFI2VlMmZW5jcnlwdGVkSWQ9QTA5NjU2ODUxRDkxNEYwSTYwV09KJmVuY3J5cHRlZEFkSWQ9QTAxOTg1MTUyRUhEUlc2VzQ2VDQ4JndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;40 pin female to female with a T-Type adapter&lt;/a&gt; to attach the GPIO outputs to the breadboard. You can use only jumper wires, but the cable will make things easier and will help prevent damage to the GPIO pins on the Raspberry Pi. If you elect not to buy the 40 pin cable with T-Type adapter you&amp;rsquo;ll need to buy &lt;a href=&#34;https://www.amazon.com/SinLoon-Breadboard-Arduino-Circuit-40-Pack/dp/B08M3QLL3Q/ref=pd_sbs_7/143-0445142-7950409?pd_rd_w=sVLrc&amp;amp;pf_rd_p=8b76d7a7-ab83-4ddc-a92d-e3e33bfdbf03&amp;amp;pf_rd_r=CDM5TGJT03VKF0ZFB577&amp;amp;pd_rd_r=8e58fd82-8503-41cf-b8f2-c78eaeb78d25&amp;amp;pd_rd_wg=tT1U0&amp;amp;pd_rd_i=B08M3QLL3Q&amp;amp;psc=1&#34;&gt;male-to-female jumper wires&lt;/a&gt;. Buying all these things separately will cost more than a kit however. &lt;a href=&#34;https://www.amazon.com/dp/B06WP7169Y/ref=sspa_dk_detail_5?psc=1&amp;amp;pd_rd_i=B06WP7169Y&amp;amp;pd_rd_w=OZVyf&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=0V0IH&amp;amp;pf_rd_r=623YJTBQ2CN2B2GYXQG5&amp;amp;pd_rd_r=faa61f0f-3aec-4cf0-8e7e-d44eb1b3b92f&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyUVlDQzMzVVZBMFYxJmVuY3J5cHRlZElkPUEwMzExNzk4MUhGSjFSS0VKTlBROCZlbmNyeXB0ZWRBZElkPUEwMzYwNjg2UUdMRU44N0YzNzIwJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;Here&amp;rsquo;s a simple kit that has all of the above&lt;/a&gt;. If you expect to follow this series I recommend buying the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt;.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RaphaelKit.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Ultimate Starter/Raphael kit&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;You will also need some basic C  and Go programming knowledge as well as familiarity with logging on to a Raspberry Pi terminal, or into the desktop GUI that comes with some OS versions. Depending on the approach you take, you may need to connect a keyboard and monitor to the Raspberry Pi. I simply SSH into the Pi. You&amp;rsquo;ll also need familiarity with how to use an editor like Vi or nano.&lt;/p&gt;
&lt;p&gt;To compile and run the C program you&amp;rsquo;ll need the &lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; libary. It&amp;rsquo;s easy to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install wiringpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then test the installation using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi@pi-node1:~/go/src/github.com/youngkin/gpio/rgbled $ gpio -v
gpio version: 2.50
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3B+, Revision: 03, Memory: 1024MB, Maker: Sony
  * Device tree is enabled.
  *--&amp;gt; Raspberry Pi &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above you&amp;rsquo;ll notice &lt;code&gt;gpio version: 2.50&lt;/code&gt;. If you&amp;rsquo;re using a Rasberry Pi 4, use the instructions given in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/check_the_wiringpi_c.html&#34;&gt;Checking the WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;WiringPi is unique in that it includes a command line tool, &lt;code&gt;gpio&lt;/code&gt;, as shown above, that can be used to manage, control, and query the GPIO board. This can be very handy. See the &lt;a href=&#34;http://wiringpi.com/the-gpio-utility/&#34;&gt;gpio reference&lt;/a&gt; for more information on what it can do and how to use it.&lt;/p&gt;
&lt;p&gt;I chose not to download the code from the Sunfounder site, preferring to write my own instead, even if all I did was copy directly from the project documentation. Due to this I created my own location to create the code. In fact, &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;my code is in Github&lt;/a&gt;. If you do like downloading code you have the option of downloading, cloning, or forking it from my Github repository. As an added bonus, the project code written in Go is also located there. The code for this project is located at &lt;a href=&#34;https://github.com/youngkin/gpio/tree/main/rgbled&#34;&gt;gpio/rgbled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Go development on a Raspberry Pi you&amp;rsquo;ll need to install the development environment onto the Raspberry Pi. &lt;a href=&#34;https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/&#34;&gt;Here&amp;rsquo;s a simple source&lt;/a&gt; that explains how to accomplish this. This source is a little dated, but the only significant issue is with the version of Go to install. The source shows installing Go &lt;strong&gt;1.14.4.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.14.4.linuxarmv6l.tar.gz&lt;/strong&gt;. The current versions are &lt;strong&gt;1.17.1.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. For the Raspberry Pi 3B+ the correct choice will be &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. The other is intended for 64 bit systems like the Raspberry Pi 4 series.&lt;/p&gt;
&lt;p&gt;For Go development you&amp;rsquo;ll also need the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; library. I chose it for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It seems to be in fairly wide use&lt;/li&gt;
&lt;li&gt;It seems to be fairly complete&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s relatively active&lt;/li&gt;
&lt;li&gt;It comes with example code and good documentation&lt;/li&gt;
&lt;li&gt;Its API is similar to WiringPi&amp;rsquo;s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another Go option is &lt;a href=&#34;https://github.com/periph/host&#34;&gt;periph&lt;/a&gt; (code) with &lt;a href=&#34;https://periph.io/&#34;&gt;documentation&lt;/a&gt;. It is more active and the documentation is very good, better than go-rpio. But for the LED examples I was able to find, go-rpio better matched what I was looking for, especially with regard to this project. But this is an excellent alternative to go-rpio and vice-versa.&lt;/p&gt;
&lt;p&gt;Finally, I&amp;rsquo;m assuming a basic knowledge of Linux if you want to veer away from the cookbook style of the Sunfounder docs. For example, I won&amp;rsquo;t be explaining what &lt;strong&gt;root privileges&lt;/strong&gt; are.&lt;/p&gt;
&lt;h2 id=&#34;information-that-would-have-been-helpful&#34;&gt;Information that would have been helpful&lt;/h2&gt;
&lt;p&gt;This project uses PWM (Pulse Width Modulation) on GPIO pins to achieve the desired effect, namely demonstrating how to create different colors with a simple RGB LED. Unfortunately the Sunfounder documentation leaves out information about PWM, like what is PWM and how is it implemented on a Raspberry Pi? I started to include in this section all the information I found missing from the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;Sunfounder project documentation&lt;/a&gt;, but it quickly became apparent that would better be left to a separate article. So if you don&amp;rsquo;t already have a good understanding of PWM I&amp;rsquo;d recommend reading my &lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; article before continuing with this article. I will be using terminology explained in that article throughout this one.&lt;/p&gt;
&lt;h2 id=&#34;rgb-led-in-c-software-pwm&#34;&gt;RGB LED in C (Software PWM)&lt;/h2&gt;
&lt;p&gt;Depending on your experience, you should consider reviewing the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;RGB LED&lt;/a&gt; project starting with &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/component_list.html&#34;&gt;Components List and Introduction&lt;/a&gt;. Peruse it up through the &lt;em&gt;Play with C&lt;/em&gt; section. If you&amp;rsquo;re experienced with basic electronics and components like breadboards and resistors you can skip it.&lt;/p&gt;
&lt;p&gt;You should set up the breadboard as described in the project documentation or in the diagram below:&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RgbLed.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder RGB LED breadboard setup&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;The WiringPi &lt;code&gt;gpio&lt;/code&gt; utility can help with debugging if necessary. You already have this utility, you used it to verify the WiringPi installation in the &lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; section above.&lt;/p&gt;
&lt;p&gt;The C code described in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;RGB LED project&lt;/a&gt; uses software PWM. When run, the colors of the RGB LED change as expected. Varying voltages to the respective RGB pins using software PWM produces light of varying brightness (off to full bright) which will produce a wide range of colors.&lt;/p&gt;
&lt;p&gt;Here is a slightly modified version of the Sunfounder C program that the controls an RGB LED:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/58aaaab75b2f16be7bd4a3621d17348b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Line 8 provides the command needed to build the program - &lt;code&gt;gcc -o rgbled rgbled.c  -lwiringPi -lpthread&lt;/code&gt;. The &lt;code&gt;-l&lt;/code&gt; flags reference the libraries needed to build the program. &lt;code&gt;-lwiringPi&lt;/code&gt; refers to the WiringPi library. It should be installed in the correct place along with WiringPi and the build command should just work. Libraries are usually located in &lt;code&gt;/usr/lib&lt;/code&gt;. Line 9 provides the command to run the program.&lt;/p&gt;
&lt;p&gt;Lines 18-20 specify, using the WiringPi pin numbering scheme, the GPIO pins 0, 1, and 2 for &lt;code&gt;LedPinRed&lt;/code&gt;, &lt;code&gt;LedPinGreen&lt;/code&gt;, and &lt;code&gt;LedPinBlue&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Line 24 contains the declaration of a signal handler for interrupt signals (SIGINT).&lt;/p&gt;
&lt;p&gt;Lines 27-29 use the &lt;code&gt;softPwmCreate()&lt;/code&gt; function to initialize the pins. The initial characters in the function name, &lt;code&gt;softPwm&lt;/code&gt;, indicate that the pins are being initialized for software PWM. The function&amp;rsquo;s first parameter is the pin number. The second parameter is the starting pulse width. The final parameter is the range. See &lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt; if you don&amp;rsquo;t understand these terms.&lt;/p&gt;
&lt;p&gt;Lines 33-35, &lt;code&gt;softPwmWrite()&lt;/code&gt; send the desired signal/voltage to the associated pin. The first parameter is the pin number, the same as in &lt;code&gt;softPwmCreate()&lt;/code&gt; above. The second parameter is the pulse width. Notice that the pulse width was &lt;code&gt;0&lt;/code&gt; in &lt;code&gt;softPwmCreate()&lt;/code&gt;. This has the effect of setting the pin to zero volts. In &lt;code&gt;softPwmWrite()&lt;/code&gt; the pulse width is set to the values specified by &lt;code&gt;r_val&lt;/code&gt;, &lt;code&gt;g_val&lt;/code&gt;, and &lt;code&gt;b_val&lt;/code&gt;. These values represent the red, green, and blue values respectively. The maximum effective value for the pulse width is the range. This will result in full brightness/voltage. Any values greater than range will have no additional impact. It is important to note that the desired voltage will continue to flow to the pins until reset by another &lt;code&gt;softPwmWrite()&lt;/code&gt;.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/55e6a197e7da1d727e9d8cd616571c73.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code snippet above is a continuation of the program. It shows the &lt;code&gt;main()&lt;/code&gt; function. Lines 2–5 initialize the WiringPi library. The program exits if this initialization fails.&lt;/p&gt;
&lt;p&gt;Line 7 specifies a signal handler to be called when SIGINT signal is received by the program. This is the signal set when the user enters ctl-C at the keyboard. This signal handler will terminate the program. This function was declared in the previous code snippet.&lt;/p&gt;
&lt;p&gt;The calls to &lt;code&gt;ledColorSet(...)&lt;/code&gt; within the &lt;code&gt;while(keepRunning)&lt;/code&gt; loop at line 11 use hex numbers to set the colors. These are used to generate the full range of available colors. They must fall in the range of &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0xff&lt;/code&gt;, recall the range value was specified in &lt;code&gt;softPwmCreate()&lt;/code&gt;. I did change the values from the original Sunfounder code as the green LED used apparently has less resistance as it&amp;rsquo;s quite a bit brighter than the red and blue LEDs and therefore throws off the generated colors. Similarly, the blue LED seems to have more resistance as it is quite a bit dimmer than the other 2 LEDs. Changing the values, at least for my specific RGB LED, generated truer colors. The code loops, changing the LED color, until terminated via a ctl-C at the keyboard.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/7668e669ebbc578e9e7cafcc506ef203.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code snippet above is a continuation of the previous code snippet. It contains the implementation of the interrupt handler described previously. It turns off all the RGB LED&amp;rsquo;s pins, resulting in the LED being completely off. &lt;code&gt;pinMode()&lt;/code&gt; sets the mode for the specified pin (first parameter) to &lt;code&gt;OUTPUT&lt;/code&gt; (second parameter). This changes the pin from a PWM pin to a pin that can only be set to ON or OFF. The voltage of an output pin cannot be varied. &lt;code&gt;digitalWrite()&lt;/code&gt; sets the voltage for the specified pin to zero (LOW).&lt;/p&gt;
&lt;p&gt;The program can be run, after compiling, using &lt;code&gt;./rgbled&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rgb-led-in-c-hardware-pwm&#34;&gt;RGB LED in C (Hardware PWM)&lt;/h2&gt;
&lt;p&gt;Since the Sunfounder documentation doesn&amp;rsquo;t include a hardware PWM solution in C I decided to create one for myself. For this program modify the breadboard as shown below:&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RgbLedHardware.jpg&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder RGB LED breadboard setup&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;This time I&amp;rsquo;m using WiringPi pins 24, 1, and 23 for red, green, and blue, which correspond to BCM pins 19, 18, and 13 respectively. This is because these are 3 of the 4 hardware PWM pins on the Broadcomm BCM2835 board. Be sure to rewire the board to match these new pin assignments . The WiringPi &lt;code&gt;gpio&lt;/code&gt; utility can help with debugging if necessary. You already have this utility, you used it to verify the WiringPi installation in the &lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; section above.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/1a249b318748b2ce7ec59ca445677d19.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This version of RGB LED is very similar to the software PWM version above. There are 2 significant differences.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Note the pin numbering used in lines 14-16. The WiringPi pin numbers used here correspond to the hardware PWM pins available on the GPIO board.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ledInit()&lt;/code&gt; and &lt;code&gt;ledColorSet()&lt;/code&gt; functions (lines 30-48) are quite different. In these functions pin mode is set to &lt;code&gt;PWM_OUTPUT&lt;/code&gt; vs. the use of &lt;code&gt;softPwmCreate&lt;/code&gt; and &lt;code&gt;pwmWrite&lt;/code&gt; is used instead of &lt;code&gt;softPwmWrite&lt;/code&gt;. Line 34 sets the range. Note that the pin number isn&amp;rsquo;t specified for the &lt;code&gt;pwmSetRange()&lt;/code&gt; call. There are 2 reasons for this. The first is that range is set at the channel level, not for individual pins. The second is that the WiringPi library doesn&amp;rsquo;t allow for the 2 channels to be specified separately. It sets both channels to the same value. Line 35, &lt;code&gt;pwmSetClock()&lt;/code&gt;, (indirectly) sets the frequency. It specifies a &lt;em&gt;divisor&lt;/em&gt;, in this case 2, that is used to divide the board&amp;rsquo;s oscillator&amp;rsquo;s clock frequency into the frequency used to control the pins. The divisor must be a number between 2 and 4095. As with &lt;code&gt;pwmSetRange()&lt;/code&gt;, &lt;code&gt;pwmSetClock()&lt;/code&gt; is specified at the channel level, not for individual pins. See &lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt; for more discussion about clocks, frequency, and divisor as they relate to PWM.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/b46a3eccdbbab8cd577cbbda87824425.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code snippet above contains the remainder of the program, &lt;code&gt;main()&lt;/code&gt; and the interrupt handler. The interrupt handler is exactly the same as the interrupt handler in the software PWM version. Like the software PWM version of the program, the program loops until interrupted via a ctl-C.&lt;/p&gt;
&lt;p&gt;The program is run using root privileges with &lt;code&gt;sudo ./rgbledHardware&lt;/code&gt;. &lt;code&gt;sudo&lt;/code&gt; is needed because direct hardware access is limited to users with root privileges. &lt;code&gt;sudo&lt;/code&gt; provides root privileges to commands prefixed with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When running the program you&amp;rsquo;ll notice that the RGB LED doesn&amp;rsquo;t produce the expected colors. Sometimes it might show purple when it should be showing blue. Sometimes it might be turned off completely when it&amp;rsquo;s supposed to be showing a color. This behavior occurs because BCM pin 13 (blue) and BCM pin 19 (red) are on the same hardware channel. As explained above, when a signal is sent to one channel it will propagate to both pins that share that channel. Green, on BCM pin 12, is unaffected. One behavior I don&amp;rsquo;t understand is why sometimes the LED is off when it should be showing a color. This only happens for red (BCM19) and blue (BCM 13) pins. Perhaps the pins that share a channel don&amp;rsquo;t produce a signal at exactly the same time. Imagine a case where the blue pin is set to 0xff and the red pin is set to 0x00. If the red pin&amp;rsquo;s signal comes in slightly after the blue signal it would override the blue pin signal turning the LED off. The takeaway from all this is that for all intents and purposes, there are only 2 hardware PWM pins can be in use at the same time, and they can&amp;rsquo;t be on the same channel.&lt;/p&gt;
&lt;h2 id=&#34;rgb-led-in-go-hardware-pwm&#34;&gt;RGB LED in Go (Hardware PWM)&lt;/h2&gt;
&lt;p&gt;This version of RGB LED will work with the same breadboard setup as the C hardware PWM version. That is, it uses the hardware PWM pins on the GPIO board. Unlike the Sunfounder C version, and the first C version in this article, the Go library only supports hardware PWM. In my &lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt; article I do include a software version of PWM in Go. It&amp;rsquo;s implemented in a companion program, &lt;a href=&#34;https://github.com/youngkin/gpio/blob/main/pwmdemo/pwmexplorer/apps/freqtest.go&#34;&gt;freqtest.go&lt;/a&gt; in the &lt;code&gt;runSoftwarePWM()&lt;/code&gt; function. Here is the code:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/072801bdf96d13eae5cba2e2774307e4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Lines 27-29 define the pins to use for the red, green and blue elements of the LED.&lt;/p&gt;
&lt;p&gt;Lines 30-31 define default values to use for settings.&lt;/p&gt;
&lt;p&gt;Lines 35–75 set the Mode to PWM and theDutyCycle for the LED&amp;rsquo;s pins. In &lt;code&gt;DutyCycle()&lt;/code&gt;, the first parameter is the pulse width, called &lt;em&gt;duty&lt;/em&gt; by go-rpio. The second parameter is the range, called &lt;em&gt;cycle&lt;/em&gt; by go-rpio. The remainder of the lines contain comments and code that address the issues with trying to use 2 hardware PWM pins residing on the same channel as noted in the &lt;a href=&#34;#hardware-pwm-in-c&#34;&gt;Hardware PWM in C&lt;/a&gt; section above.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/11c97e8d84b134c40e3d15d6f3c639cf.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This code snippet is a continuation of the program above. This gist shows &lt;code&gt;ledInit()&lt;/code&gt;. It initializes the GPIO pins for use in the program. They set the mode (PWM), frequency, and duty cycle (providing parameters for pulse width and range (aka cycle)). As described in &lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt;, the specified frequency must be between 4688 and 9,600,000.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/youngkin/188d35218c26003cfc029b5ca7a3f838.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is part 3 of the program and shows the implementation of &lt;code&gt;main()&lt;/code&gt;. Lines 2-4 initialize the go-rpio library. Line 5 makes sure the resources used are released when the program exits.&lt;/p&gt;
&lt;p&gt;The remainder of the program prompts the user for the red, green, and blue values to use and the sets the pins approporiately.&lt;/p&gt;
&lt;p&gt;The full program, &lt;a href=&#34;https://github.com/youngkin/gpio/blob/main/rgbled/rgbled.go&#34;&gt;rgbled.go&lt;/a&gt;, can be found in the &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;gpio github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it, I hope you found this article interesting. To quickly review, this article covered the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setting up the physical environment needed to experiment with an RGB LED on a Raspberry Pi 3B+.&lt;/li&gt;
&lt;li&gt;Provided, via a link to another article&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, the detailed knowledge of PWM that&amp;rsquo;s missing from the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;Sunfounder RGB LED Project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Provided and explained the C and Go code needed to set colors in an RGB LED using both hardware and software PWM.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/&#34;&gt;Pulse Width Modulation for Dummies, with a Slice of Raspberry Pi&lt;/a&gt; contains all you need to know about PWM on a Raspberry Pi, at least until you want to become a PWM expert! &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Pulse Width Modulation for Dummies</title>
      <link>https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/</link>
      <pubDate>Thu, 21 Oct 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/</guid>
      <description>&lt;p&gt;This is the second article in a series that explores &lt;a href=&#34;https://youngkin.github.io/categories/gpio/&#34;&gt;GPIO programming on a Raspberry Pi 3B+&lt;/a&gt;. This article provides some details about hardware and software based PWM on the Raspberry Pi, specifically the 3B+ with the &lt;a href=&#34;https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf&#34;&gt;Broadcomm BCM2835 board&lt;/a&gt;. This article has an accompanying application, &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;PWM Explorer&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, that can be used to experiment with PWM settings and capabilities.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I was writing an &lt;a href=&#34;https://youngkin.github.io/post/sunfoundergpionotesrgbled&#34;&gt;article&lt;/a&gt; as a companion to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;SunFounder RGB LED project&lt;/a&gt; to cover some areas that were missing in that project such as what is PWM, how does it work, and why the code was written as it was. I had no idea what PWM was or what I was doing or why. To fill the gap I started researching PWM and found numerous articles about PWM&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, and also software libraries like &lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; (C)&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; (Go)&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;, &lt;a href=&#34;https://www.airspayce.com/mikem/bcm2835&#34;&gt;BCM2835 by Mike McCalley&lt;/a&gt; (C)&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; and &lt;a href=&#34;https://abyz.me.uk/rpi/pigpio/pdif2.html&#34;&gt;pigpio&lt;/a&gt; (Python &amp;amp; C)&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;. So with my focus still on controlling an RGB LED via GPIO and PWM I started writing programs in C and Go. I quickly had difficulty in several areas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Terminology is used inconsistently across articles and the libraries. For example, some used the terms &lt;em&gt;Cycle&lt;/em&gt; and &lt;em&gt;Range&lt;/em&gt; for the same thing.&lt;/li&gt;
&lt;li&gt;The libraries were documented to varying degrees. Coupled with a lack of common terminology it was difficult to figure out how to use them.&lt;/li&gt;
&lt;li&gt;Going hand in hand with figuring out how to use the libraries, it was difficult to understand how different parameters affected the behavior of the hardware, in this case an RGB LED.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My intent in writing this is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide an overview of PWM and its main concepts.&lt;/li&gt;
&lt;li&gt;Provide a glossary that links the various PWM terms to a consistent definition.&lt;/li&gt;
&lt;li&gt;Explain how the various PWM settings interact with each other (not just &lt;em&gt;duty cycle&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Provide the information needed (sometimes via external references) to install a GPIO test bed on a Raspberry Pi 3B+.&lt;/li&gt;
&lt;li&gt;Provide programs, written in Go and C, that demonstrate how to effectively use WiringPi&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; and go-rpio&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Provide an application that can be used to experiment with the various PWM parameters in real time.&lt;/li&gt;
&lt;li&gt;Provide hard to find information on some of the concepts and PWM settings (e.g., minimum/maximum PWM frequencies).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lest anyone think I&amp;rsquo;m presenting myself as an expert in GPIO and PWM, I&amp;rsquo;m not. Despite my best attempts to summarize what I&amp;rsquo;ve learned, I&amp;rsquo;m sure I&amp;rsquo;ve made mistakes or made things more confusing. Any mistakes I&amp;rsquo;ve made are my own. If anyone comes across any mistakes topics that could be clarified, I&amp;rsquo;d appreciate comments so I can modify this article.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not writing this to be a definitive source about all things PWM. There are better resources for that. This article lists those &lt;a href=&#34;#references&#34;&gt;resources&lt;/a&gt; that I found particularly helpful.&lt;/p&gt;
&lt;p&gt;Now to the outline of this article. The sections are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; covers areas like how to get the software libraries used in this article as well as things like the hardware needed by the &lt;em&gt;PWM Explorer&lt;/em&gt; application to illustrate behavior.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-pwm&#34;&gt;What is PWM?&lt;/a&gt; provides a very basic introduction to PWM. It provides definitions of common terms and the aliases used in the articles and software libraries.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#overview-of-pwm-on-a-raspberry-pi-3b&#34;&gt;Overview of PWM on a Raspberry Pi 3B+&lt;/a&gt; provides an overview of how GPIO and PWM are implemented on a Raspberry Pi.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploring-pwm-on-a-raspberry-pi&#34;&gt;Exploring PWM on a Raspberry Pi&lt;/a&gt; provides a description of the various PWM settings, how they interact with each other, some hard to find tidbits about the PWM settings, and an overview of the application, &lt;em&gt;PWM Explorer&lt;/em&gt;, that can be used to drive PWM on a Raspberry Pi to see how the settings interact with each other in real time.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt; to wrap things up.&lt;/li&gt;
&lt;li&gt;And a set of useful &lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, you&amp;rsquo;ll need a Raspberry Pi. I used a Raspberry Pi 3B+ with the &amp;lsquo;Stretch&amp;rsquo; version of the Raspbian OS. The Raspberry Pi website has instructions on how to &lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;setup a new Raspberry Pi from scratch&lt;/a&gt;&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; if you decide to go that way vs. buying a complete kit.&lt;/p&gt;
&lt;p&gt;Other items you&amp;rsquo;ll need include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href=&#34;https://www.amazon.com/dp/B082KBF7MM/ref=sspa_dk_detail_4?psc=1&amp;amp;pd_rd_i=B082KBF7MM&amp;amp;pd_rd_w=1tGTV&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=fX8JB&amp;amp;pf_rd_r=44DE0RS1E9FD42RBYC7R&amp;amp;pd_rd_r=47cbdc7f-7834-455f-9429-ef74a438bd45&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVVkdZVUZRNUw3ODkmZW5jcnlwdGVkSWQ9QTA4MzI4MzYyU0VLNzBJM0cxRUVMJmVuY3J5cHRlZEFkSWQ9QTA0Mjk1NTMzSzNSWlNFUjU0NURBJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;breadboard&lt;/a&gt; &lt;em&gt;(You may find &lt;a href=&#34;http://wiki.sunfounder.cc/index.php?title=Breadboard_Basics_%E2%80%93_Types&#34;&gt;this tutorial on breadboards&lt;/a&gt; helpful&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;)&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;some &lt;a href=&#34;https://www.amazon.com/dp/B08HZ26ZLF/ref=syn_sd_onsite_desktop_19?psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExRFpLWElCRjg1MUNMJmVuY3J5cHRlZElkPUEwMjMyMTE1M01aOFE3U1BQS09YSiZlbmNyeXB0ZWRBZElkPUEwODE5NTMxMktEMTlZRjEyQjBJNiZ3aWRnZXROYW1lPXNkX29uc2l0ZV9kZXNrdG9wJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;jumper wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/EDGELEC-Tri-Color-Multicolor-Diffused-Resistors/dp/B077XGF3YR/ref=asc_df_B077XGF3YR/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=242051162351&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=11064062033670066895&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=9028749&amp;amp;hvtargid=pla-430228081645&amp;amp;psc=1&#34;&gt;a 220 Ohm resistor, and a RGB LED&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You should also consider getting a &lt;a href=&#34;https://www.amazon.com/dp/B082PRVRYR/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B082PRVRYR&amp;amp;pd_rd_w=8mKhr&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=e9psa&amp;amp;pf_rd_r=S09F37DF2G5FW8B8GX4B&amp;amp;pd_rd_r=c065c120-e60b-45e9-b93b-f581f048cf46&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFCMzhUQ09COFI2VlMmZW5jcnlwdGVkSWQ9QTA5NjU2ODUxRDkxNEYwSTYwV09KJmVuY3J5cHRlZEFkSWQ9QTAxOTg1MTUyRUhEUlc2VzQ2VDQ4JndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;40 pin female to female with a T-Type adapter&lt;/a&gt; to attach the GPIO outputs to the breadboard. You can use only jumper wires, but the T-Type adapter will make things easier and will help prevent damage to the GPIO pins on the Raspberry Pi. If you elect not to buy the 40 pin cable with T-Type adapter you&amp;rsquo;ll need to buy &lt;a href=&#34;https://www.amazon.com/SinLoon-Breadboard-Arduino-Circuit-40-Pack/dp/B08M3QLL3Q/ref=pd_sbs_7/143-0445142-7950409?pd_rd_w=sVLrc&amp;amp;pf_rd_p=8b76d7a7-ab83-4ddc-a92d-e3e33bfdbf03&amp;amp;pf_rd_r=CDM5TGJT03VKF0ZFB577&amp;amp;pd_rd_r=8e58fd82-8503-41cf-b8f2-c78eaeb78d25&amp;amp;pd_rd_wg=tT1U0&amp;amp;pd_rd_i=B08M3QLL3Q&amp;amp;psc=1&#34;&gt;male-to-female jumper wires&lt;/a&gt;. Buying all these things separately will cost more than a kit however.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/dp/B06WP7169Y/ref=sspa_dk_detail_5?psc=1&amp;amp;pd_rd_i=B06WP7169Y&amp;amp;pd_rd_w=OZVyf&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=0V0IH&amp;amp;pf_rd_r=623YJTBQ2CN2B2GYXQG5&amp;amp;pd_rd_r=faa61f0f-3aec-4cf0-8e7e-d44eb1b3b92f&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyUVlDQzMzVVZBMFYxJmVuY3J5cHRlZElkPUEwMzExNzk4MUhGSjFSS0VKTlBROCZlbmNyeXB0ZWRBZElkPUEwMzYwNjg2UUdMRU44N0YzNzIwJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;Here&amp;rsquo;s a simple kit that has all of the above&lt;/a&gt;. I&amp;rsquo;m finding the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt; especially useful. NOTE: The Ultimate Starter Kit and the Raphael Kit are the same product.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RaphaelKit.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Ultimate Starter/Raphael kit&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;You will also need some basic C  and Go programming knowledge as well as familiarity with logging on to a Raspberry Pi terminal, or into the desktop GUI that comes with some OS versions. Depending on the approach you take, you may need to connect a keyboard and monitor to the Raspberry Pi. I simply SSH into the Pi. You&amp;rsquo;ll also need familiarity with how to use an editor like vim or nano.&lt;/p&gt;
&lt;p&gt;To compile and run the C program you&amp;rsquo;ll need the WiringPi&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; library. It&amp;rsquo;s easy to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install wiringpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then test the installation using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pi@pi-node1:~/go/src/github.com/youngkin/gpio/rgbled $ gpio -v
gpio version: 2.50
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3B+, Revision: 03, Memory: 1024MB, Maker: Sony
  * Device tree is enabled.
  *--&amp;gt; Raspberry Pi &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above you&amp;rsquo;ll notice &lt;code&gt;gpio version: 2.50&lt;/code&gt;. If you&amp;rsquo;re using a Rasberry Pi 4, use the instructions given in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/check_the_wiringpi_c.html&#34;&gt;Checking the WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;WiringPi is unique in that it includes a command line tool, &lt;code&gt;gpio&lt;/code&gt;, as shown above, that can be used to manage, control, and query the GPIO board. This can be very handy. See the &lt;a href=&#34;http://wiringpi.com/the-gpio-utility/&#34;&gt;gpio reference&lt;/a&gt; for more information on what it can do and how to use it.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Go development on a Raspberry Pi you&amp;rsquo;ll need to install the development environment onto the Raspberry Pi. &lt;a href=&#34;https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/&#34;&gt;Here&amp;rsquo;s a simple source&lt;/a&gt; that explains how to accomplish this. This source is a little dated, but the only significant issue is with the version of Go to install. The source shows installing Go &lt;strong&gt;1.14.4.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.14.4.linuxarmv6l.tar.gz&lt;/strong&gt;. The current versions are &lt;strong&gt;1.17.1.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. For the Raspberry Pi 3B+ the correct choice will be &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. The other is intended for 64 bit systems like the Raspberry Pi 4 series. You can find current ARM versions of Go at the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang download site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Go development you&amp;rsquo;ll also need the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt;&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; library.&lt;/p&gt;
&lt;p&gt;If you want to veer away from the cookbook style of the Sunfounder docs you&amp;rsquo;ll need some basic knowledge of Linux . For example, I won&amp;rsquo;t be explaining what &lt;strong&gt;root privileges&lt;/strong&gt; are.&lt;/p&gt;
&lt;p&gt;Finally, I wrote an application that supports experimenting with the various PWM settings on the Raspberry Pi 3B+. There are 2 options for getting the code. First, you can clone or fork the &lt;a href=&#34;https://github.com/youngkin/gpio.git&#34;&gt;project&lt;/a&gt; from GitHub. If you do that you&amp;rsquo;ll need to have experience with git and have it installed on the Raspberry Pi. See this &lt;a href=&#34;https://linuxize.com/post/how-to-install-git-on-raspberry-pi/&#34;&gt;article on installing git&lt;/a&gt; for more details. After installing &lt;code&gt;git&lt;/code&gt; you can download the project by running &lt;code&gt;git clone https://github.com/youngkin/gpio.git&lt;/code&gt;. If you would like to contribute the project please fork the respository instead. As an alternative to using git you can also download a &lt;em&gt;zip&lt;/em&gt; file of the project by navigating to the &lt;a href=&#34;https://github.com/youngkin/gpio.git&#34;&gt;project&amp;rsquo;s URL&lt;/a&gt;, clicking on the &lt;em&gt;Code&lt;/em&gt; button above and to the right of the file listing, and selecting &lt;em&gt;Download ZIP&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-pwm&#34;&gt;What is PWM?&lt;/h2&gt;
&lt;p&gt;At it&amp;rsquo;s most basic, PWM is used to simulate an analog signal using a digital source (like a GPIO pin). As an example, an LED&amp;rsquo;s brightness and/or color can be modified by varying the voltage supplied to the LED. A variety of analog devices, such as a motor&amp;rsquo;s speed, can be controlled in the same way. PWM simulates varying voltages by varying the length of the digital power pulse within a given duration.&lt;/p&gt;
&lt;p&gt;In addition to what&amp;rsquo;s presented here, &lt;a href=&#34;https://www.kompulsa.com/introduction-pwm-pulse-width-modulation-works/&#34;&gt;Introduction to PWM: How Pulse Width Modulation works&lt;/a&gt; describes some of the same concepts described here as well as a few more examples of how PWM can be used. The &lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt; section has links to more sources of PWM information.&lt;/p&gt;
&lt;p&gt;The follow sections cover the main points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Terminology&#34;&gt;Terminology&lt;/a&gt; defines terms that will be used throughout the document&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Primary-concepts&#34;&gt;Primary concepts&lt;/a&gt; describes the major concepts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;p&gt;My research into PWM involved reading several articles&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; as well as examining the code of several PWM software libraries in various languages &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;. These various sources aren&amp;rsquo;t completely consistent in the terminology they use. Here are some of the common terms, their aliases, and definitions. See the diagram below for a visual representation of the terms.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/PWMPulsePeriod.png&#34; align=&#34;center&#34; width=&#34;800&#34; height=&#34;400&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;PWM timing diagram&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt; - Per Wikipedia &lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;, &lt;em&gt;frequency is the number of occurrences of a repeating event per unit of time&lt;/em&gt;. In electronics an event is the peak of a wave to the next peak of the wave (analog). In digital terms an event is from the leading edge of one pulse to the leading edge of the next pulse. Frequency is measured in Hertz, which is the number of repeating events per second.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Period&lt;/strong&gt; - Also from Wikipedia &lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;, period is the duration of time of one cycle in a repeating event. Period is measured in seconds. So period is how long something takes vs. frequency which is how many times an event occurs in a given duration of time. This makes period the reciprocal of the frequency&lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt; and vice versa, ie., &lt;em&gt;unit of time per event&lt;/em&gt; vs. &lt;em&gt;events per unit of time&lt;/em&gt;. In the above diagram the period is 10 milliseconds (ms). So the frequency in the above diagram is &lt;code&gt;1/.01&lt;/code&gt; or 100. Since frequency is measured in Hertz, or events/second, the frequency in the above diagram is 100Hz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clock source&lt;/strong&gt;&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt; - Also called a clock, it sets the rate at which the clock advances.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM clock&lt;/strong&gt; - Sometimes also called a clock so this gets a bit confusing. The PWM clock&amp;rsquo;s underlying input is the clock source. Different hardware devices, such as motors and servos, only work within specific period ranges. Often the source clock is too fast for these devices. The PWM clock is created by dividing the clock source&amp;rsquo;s frequency with a number that will result in the PWM clock operating at a frequency that&amp;rsquo;s appropriate for a given device. Different devices will need different PWM clock speeds. The number used as the denominator in this calculation is frequently called the &lt;strong&gt;divisor&lt;/strong&gt; in software libraries and the BCM2835 Data Sheet&lt;sup id=&#34;fnref:15&#34;&gt;&lt;a href=&#34;#fn:15&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;15&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulse&lt;/strong&gt; - From the &amp;ldquo;P&amp;rdquo; in PWM. This is the minimum length of time a PWM pin&amp;rsquo;s output is set to high or low. Its minimum length is governed by the speed of the PWM clock. I&amp;rsquo;ll use pulse throughout this document, mostly because it&amp;rsquo;s in the name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt; - Range can be thought of as a counter that counts PWM clock pulses. The ratio of range to PWM clock frequency can be thought of as the frequency of the signal sent to a PWM pin. I&amp;rsquo;ve also seen the term cycle length used as as an alias for range&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulse width&lt;/strong&gt; - Pulse width is the duration of a pulse. In the various software libraries I&amp;rsquo;ve seen it called width&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, value&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, data&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;, and duty length&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;primary-concepts&#34;&gt;Primary concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Duty cycle&lt;/strong&gt; is the ratio of Pulse Width to Range, i.e., &lt;code&gt;Pulse-Width/Range&lt;/code&gt;. For a range of 10 and a pulse of 5, the duty cycle is 5/10 or 50%. Duty cycle regulates the output voltage of a PWM device. For a 50% duty cycle and an input voltage of 5 volts, the output voltage will be 2.5 volts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software vs. Hardware PWM&lt;/strong&gt; - For the purposes of this article there are 2 ways to generate a PWM signal, software-based and hardware-based&lt;sup id=&#34;fnref:16&#34;&gt;&lt;a href=&#34;#fn:16&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;16&lt;/a&gt;&lt;/sup&gt;. Hardware-based PWM is generated by a dedicated hardware PWM device that can be configured to generate a PWM signal as described above&lt;sup id=&#34;fnref:16&#34;&gt;&lt;a href=&#34;#fn:16&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;16&lt;/a&gt;&lt;/sup&gt;. Hardware-based PWM produces a very uniform signal with regard to timing. A uniform signal is required, for example, to produce a flicker-free light source such as an LED. Software-based PWM is directly implemented in the executing program using a &lt;code&gt;while(true)&lt;/code&gt; for loop that never ends which controls the amount of time a pin is allowing current to flow (pulse) vs. the amount of time the pin isn&amp;rsquo;t allowing current to flow. In this case the uniformity of the signal is determined by the accuracy of a language&amp;rsquo;s &lt;code&gt;sleep()&lt;/code&gt; function and the OS (Linux) scheduler. A less uniform signal, for example, may result in a flickering light source. There is a more complete description of &lt;a href=&#34;https://raspberrypi.stackexchange.com/questions/100641/whats-the-difference-between-soft-pwm-and-pwm&#34;&gt;the difference between soft PWM and PWM&lt;/a&gt; and associated pros and cons on the Raspberry Pi Stack Exchange site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Balanced vs. Mark/Space&lt;/strong&gt; refers to the method used to determine how the PWM output signals are to be generated. There are 2 algorithms, balanced and mark/space. Balanced indicates that the duty cycle will be evenly spread across the range. That is to say, the pulse width will be split into a set of shorter pulses that are distributed across the range. In contrast, in mark/space, the pulse is generated as a single signal called a &amp;ldquo;mark&amp;rdquo;. The time remaining in the range, &lt;code&gt;range-pulseWidth&lt;/code&gt; , is called the &amp;ldquo;space&amp;rdquo;. No signal is present in the space duration. Mark/Space is often good enough, but as periods get longer so does the absolute time difference between the mark and space durations. For large ratios of &lt;code&gt;range/PWMClockFrequency&lt;/code&gt;, e.g., 1 (&lt;em&gt;which equates to 1Hz since the denominator unit is frequency&lt;/em&gt;) and a duty-cycle of 50%, the space will be 500 milliseconds and the mark will be 500 milliseconds. This difference is large enough to be discernable in the behavior of the device. For example a motor might surge or a light flicker. In contrast, balanced mode will smooth out these differences. For the same 1Hz range and 50% duty-cycle, balanced mode might produce 500 1 millisecond signals every 2 milliseconds (&lt;code&gt;1/(500 * .002) = 1 = 1Hz&lt;/code&gt;). The same 50% duty-cycle is produced, but the output signal is much smoother. Hardware implementations like the BCM2835 support both algorithms. It is possible to support both algorithms in software, but depending on the algorithms are implemented they may consume a significant amout of CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview-of-pwm-on-a-raspberry-pi-3b&#34;&gt;Overview of PWM on a Raspberry Pi 3B+&lt;/h2&gt;
&lt;p&gt;Physically PWM is implemented via the BCM2835&amp;rsquo;s GPIO pins. The BCM2835 board has 40 pins, a subset of which are GPIO pins. Of the GPIO pins&lt;sup id=&#34;fnref:17&#34;&gt;&lt;a href=&#34;#fn:17&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;17&lt;/a&gt;&lt;/sup&gt; there are 4 hardware PWM pins, 13, 19, 12, and 18. The remaining GPIO pins, as well as the hardware GPIO pins, can be used for software PWM.&lt;/p&gt;
&lt;p&gt;There are several clock sources available on the BCM2835 board.  The clock source used by the GPIO libraries in this article is called the oscillator. It&amp;rsquo;s frequency as documented in several references&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; is 19.2MHz with a period of about 52 nanoseconds (1 / 19,200,000 = ~0.000000052 seconds).&lt;/p&gt;
&lt;p&gt;The BCM2835 board also implements something called a channel&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;. A hardware PWM pin is controlled by a channel. The PWM Clock, range, and pulse width are specified for a channel. All hardware pins connected to that channel will share the same range, pulse-width, and duty-cycle. The BCM2835 board has 2 channels. GPIO pins&lt;sup id=&#34;fnref:17&#34;&gt;&lt;a href=&#34;#fn:17&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;17&lt;/a&gt;&lt;/sup&gt; 18 and 12 on one channel, 13 and 19 on the other. This means that a signal that&amp;rsquo;s sent to either pin that share a channel will go to both pins. For example, sending a signal on GPIO12 will also be shared with GPIO18 and vice versa&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:15&#34;&gt;&lt;a href=&#34;#fn:15&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;15&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id=&#34;exploring-pwm-on-a-raspberry-pi&#34;&gt;Exploring PWM on a Raspberry Pi&lt;/h2&gt;
&lt;p&gt;The setup for this exercise is similar to a combination of the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;SunFounder Blinking LED&lt;/a&gt; and &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;Sunfounder RGB LED&lt;/a&gt; projects. If you&amp;rsquo;re familiar with wiring a breadboard the diagrams below may be all you need to get started. Otherwise it may be worth while looking at the Sunfounder LED projects and an &lt;a href=&#34;http://wiki.sunfounder.cc/index.php?title=Breadboard_Basics_%E2%80%93_Types&#34;&gt;introduction to breadboards&lt;/a&gt;&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;. The resistor used in both diagrams is 220 Ohms.&lt;/p&gt;
&lt;!--
&lt;p align=&#34;center&#34;&gt;
  &lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/redledimage.jpeg&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Red LED&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;

  &lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/redled.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
  &lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Red LED breadboard setup&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;/p&gt;
--&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;LED&lt;/th&gt;
&lt;th&gt;Breadboard setup&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/redledimage2.jpg&#34; width=&#34;600&#34;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/redled.png&#34; height=&#34;600&#34; width=&#34;600&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This setup will be used to demonstrate software PWM on a non-PWM pin. The black wires are the ground. The upper black wire connects the board &lt;em&gt;GND&lt;/em&gt; pin to the ground bus on the breadboard. The lower black wire connects the ground bus to the negative leg on the red LED (negative is the shorter leg). The red wire is for positive current. It connects GPIO6 to the positive leg on the red LED (positive is the longer leg). Note the 220 Ohm resistor bridging the red wire and the positive pin on the LED. This is required to avoid burning out the LED.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RGB LED&lt;/th&gt;
&lt;th&gt;Breadboard setup&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/rgbledimage.jpg&#34; width=&#34;300&#34;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/rgbled2.png&#34; height=&#34;800&#34; width=&#34;800&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This setup will be used to demonstrate hardware and software PWM on a hardware PWM pin. Looking down at the the breadboard the RGB LED the pins are set up as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The red pin is at the top of the RGB LED. It&amp;rsquo;s connected to GPIO pin 13 with the red wire.&lt;/li&gt;
&lt;li&gt;The ground is the next one down. It&amp;rsquo;s connected to the ground bus with the black wire.&lt;/li&gt;
&lt;li&gt;The green pin is 1 down from the ground. It&amp;rsquo;s connected to GPIO pin 18 with the white wire.&lt;/li&gt;
&lt;li&gt;The blue pin is at the bottom of the RGB LED. It&amp;rsquo;s connected to GPIO pin 19 with the blue wire.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As with the previous diagram, a 220 Ohm resistor bridges the GPIO pins to the red, green, and blue pins of the LED.&lt;/p&gt;
&lt;p&gt;This setup shows the green pin on the LED (white wire) connected to the GPIO hardware PWM pin 18. A different hardware PWM pin may be used such as 12, 13, and 19. Also, the use of an RGB LED isn&amp;rsquo;t required. Any type of LED will work. It will have to be wired up in a similar manner however, i.e., the LED positive lead should be connected to a hardware PWM pin (white wire) and the LED&amp;rsquo;s ground lead (the longest lead) to the board&amp;rsquo;s ground.&lt;/p&gt;
&lt;p&gt;If you do choose to use an RGB LED pin it&amp;rsquo;s important to note that only 2 of the colors can be controlled by hardware PWM. The pins need to be on different PWM channels. In the diagram above the red and blue pins attached to GPIO pins 13 and 19 (blue and red) to demonstrate this limitation. Recall that GPIO pins 13 and 19 share a channel. As a result, a signal sent to one pin be propagated to the other. To get the true RGB LED colors software PWM is required, along with a maximum of 2 hardware pins on different channels. While hardware pins can be used, it&amp;rsquo;s also possible to use all non-hardware pins.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;ll be easier to play with the different combinations of PWM settings when both of the above setups are wired up at the same time. It allows for any of the GPIO pins to be used by &lt;em&gt;PWM Explorer&lt;/em&gt;, with the exception that for hardware PWM the LED(s) must be installed on hardware PWM pins (GPIO pins 13, 19, 18, and 12). If more than one hardware pin is used they must be on different channels.&lt;/p&gt;
&lt;h3 id=&#34;driving-pwm-using-pwm-explorer&#34;&gt;Driving PWM using PWM Explorer&lt;/h3&gt;
&lt;p&gt;PWM Explorer supports C and Go. Choosing C you can experiment with both Mark/Space and Balanced PWM Modes. The Go library I used, go-rpio&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; only supports Mark/Space.&lt;/p&gt;
&lt;p&gt;As described in the &lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; section above, I wrote an application, called &lt;em&gt;PWM Explorer&lt;/em&gt;, to experiment with PWM on a Raspberry Pi. This software can be used to drive PWM on both PWM and non-PWM pins. It also supports changing the various PWM parameters like divisor, range, and pulse width to provide visual feedback on the effect of these parameters on the behavior of the LEDs connected to the pins. This software is available on my &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;gpio GitHub repository&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/pwmexplorer.jpg&#34; align=&#34;center&#34; width=&#34;1000&#34; height=&#34;1000&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;PWM Explorer&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;The diagram above is a screenshot of the main program and has labels with brief descriptions of the various sections of the user interface. It&amp;rsquo;s a text based UI so that it can be run on a Raspberry Pi that doesn&amp;rsquo;t have the desktop capability installed. It can be run at the command line by navigating to the installation directory under the &lt;code&gt;gpio/pwmdemo/pwmexplorer&lt;/code&gt; directory and running &lt;code&gt;sudo /usr/local/go/bin/go run main.go&lt;/code&gt;. &lt;code&gt;sudo&lt;/code&gt; is needed because some of the GPIO access requires &lt;code&gt;root&lt;/code&gt; permissions. In addition to the main UI application there are 2 supporting programs in the &lt;code&gt;gpio/pwmdemo/pwmexplorer/apps&lt;/code&gt; directory, &lt;code&gt;freqtest.go&lt;/code&gt; and &lt;code&gt;freqtest.c&lt;/code&gt;. These are the actual implementations of the code required to interact with the PWM capabilities on the Raspberry Pi 3B+ using the go-rpio and WiringPi libraries. They are written in Go and C respectively. The C program must be built prior to running PWM Explorer. This is accomplished by changing to the &lt;code&gt;gpio/pwmdemo/pwmexplorer/apps&lt;/code&gt; directory and running &lt;code&gt;gcc -o freqtest freqtest.c -lwiringPi -lpthread&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a variety of PWM parameters supported. These are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PWM Pin&lt;/strong&gt; - this item allows you to choose a PWM hardware pin to use. The pins available in the dropdown are specific to the language chosen. C uses the WiringPi&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; library which uses its own pin numbering scheme. Go uses the standard GPIO pin numbers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-PWM Pin&lt;/strong&gt; - this item allows you to specify a PWM pin to use, even a hardware pin. PWM Pin and Non-PWM Pin are mutually exclusive and the program will prevent you from specifying both. As with PWM Pin above, the numbering scheme is specific to the language, C or Go, chosen. The program offers no protection against using the wrong pin numbering scheme so be careful what you specify. If the pin chosen doesn&amp;rsquo;t behave as expected it may be that you used the wrong pin numbering scheme.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clock Frequency/Clock Divisor&lt;/strong&gt; - this item is used to set the PWM clock frequency. The go-rpio library supports specifying the PWM clock frequency directly. The C WiringPi library uses the concept of divisor defined above to set the PWM clock frequency. You can calculate the divisor to use by dividing the Raspberry Pi 3B&amp;rsquo;s oscillator clock&amp;rsquo;s frequency of 19,200,000 Hertz by the desired PWM clock frequency. For example. to get a 100kHz PWM clock frequency divide 19,200,000 by 100,000. This calculation gives the Clock Divisor to use, 192 in this case. To avoid confusion, when C is the chosen language the label will be &lt;em&gt;Clock Divisor&lt;/em&gt;. When Go is the chosen language this items label will be &lt;em&gt;Clock Frequency&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM Mode&lt;/strong&gt; - this item is used to specify whether Mark/Space or Balanced modes will be used. Note: some combinations of language, pin type (PWM vs. non-PWM), and PWM Type (hardware/software) don&amp;rsquo;t support Balanced mode. When this is the case a message will be displayed in the &lt;em&gt;Messages&lt;/em&gt; area. The Go go-rpio library doesn&amp;rsquo;t support balanced mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt; - the desired range as defined in the &lt;a href=&#34;#Terminology&#34;&gt;Terminology&lt;/a&gt; section above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulse Width&lt;/strong&gt; - the desired pulse width as defined in the &lt;a href=&#34;#Terminology&#34;&gt;Terminology&lt;/a&gt; section above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM Type&lt;/strong&gt; - this item is used to specify whether hardware or software PWM is to be used.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the terminal size some &lt;em&gt;Help&lt;/em&gt; and &lt;em&gt;Code&lt;/em&gt; text may not be visible. To address this, both the &lt;em&gt;Help&lt;/em&gt; and &lt;em&gt;Code&lt;/em&gt; sections are scrollable.&lt;/p&gt;
&lt;h4 id=&#34;experimenting-with-pwm-parameters&#34;&gt;Experimenting with PWM Parameters&lt;/h4&gt;
&lt;p&gt;As was stated earlier, the WiringPi and go-rpio libraries both use the Raspberry Pi 3B&amp;rsquo;s Oscillator clock which has a frequency is 19.2MHz. This is fixed and cannot be changed. But besides the pins chosen, the Clock Frequency/Divisor, PWM Mode, Range, Pulse Width, and PWM Type can all be modified. All of these interact with one another either directly or indirectly. In this section I will explain these relationships and how they interact. You can use the PWM Explorer to follow along and directly see the effects that I&amp;rsquo;ll explain.&lt;/p&gt;
&lt;p&gt;This section uses an LED to demonstrate the effect of the various parameters on a device. There is a property of the human eye that needs to be understood. The human eye perceives linear changes in in brightness in a logarithmic fashion. Specifically, at the lower end of a pulse width setting (lower voltage) changes in a given setting will produce what looks like a more significant result than the same change at the higher end (higher voltage)&lt;sup id=&#34;fnref:18&#34;&gt;&lt;a href=&#34;#fn:18&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;18&lt;/a&gt;&lt;/sup&gt;. The PWM Explorer doesn&amp;rsquo;t compensate for this.&lt;/p&gt;
&lt;h5 id=&#34;pwm-clock-frequency--clock-divisor&#34;&gt;PWM Clock Frequency / Clock Divisor&lt;/h5&gt;
&lt;p&gt;The first thing to decide is what frequency you want the PWM clock to run at. It&amp;rsquo;s frequency is specified directly when using Go and via the divisor when using C. Choosing this frequency is impacted by the type of PWM device being used, e.g., an LED or a motor. This article doesn&amp;rsquo;t cover how to calculate this frequency, but there are sources that do&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. Instead I&amp;rsquo;ll focus on the general impact of clock frequency on LED devices.&lt;/p&gt;
&lt;p&gt;You may or may not be aware that the human eye can detect flickering starting at about 60Hz and below. Flickering is more apparent using peripheral vision. Given this, a PWM clock frequency to Range, &lt;code&gt;PWMClockFrequency / Range&lt;/code&gt;, below 60Hz isn&amp;rsquo;t ideal unless you&amp;rsquo;re trying to create a blinking LED. Assuming the range can&amp;rsquo;t be modified, choosing the right Clock Frequency/Divisor will directly impact whether an LED appears to be a steady light source, flickering, or blinking.&lt;/p&gt;
&lt;p&gt;Here are some settings to try this out &lt;em&gt;(these assume the LED is wired up to GPIO pin 18)&lt;/em&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Go&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PWM Pin&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Non-PWM Pin&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock Frequency/Clock Divisor&lt;/td&gt;
&lt;td&gt;5000 (10000)&lt;/td&gt;
&lt;td&gt;3840 (1920)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Mode&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pulse Width&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Type&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using the above settings will result in a 30Hz frequency at the pin. As this is well below 60Hz flickering will be apparent. Changing the PWM Clock Frequency/Clock Divisor will result in a pin frequency of 62.5Hz. The result will be that there is no apparent flickering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;The &amp;ldquo;General Purpose Clock Divisors&amp;rdquo; on the BCM2835 have a register width of 12 bits (see&lt;sup id=&#34;fnref:15&#34;&gt;&lt;a href=&#34;#fn:15&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;15&lt;/a&gt;&lt;/sup&gt;, page 108, &lt;code&gt;DIVI&lt;/code&gt; field bits 23 thru 12). This means the maximum value of the Clock Divisor is 4095 (0 to 2^12-1). The go-rpio&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; further states that PWM Clock frequencies below 4688Hz will result in &amp;ldquo;unexpected behavior&amp;rdquo; (rpio.go, see comments for &lt;code&gt;SetFreq()&lt;/code&gt; function). Other sources&lt;sup id=&#34;fnref:19&#34;&gt;&lt;a href=&#34;#fn:19&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;19&lt;/a&gt;&lt;/sup&gt; state that 9.6Mhz is the highest available PWM Clock frequency (19.2Mhz/2). I&amp;rsquo;ve seen unexpected results with both frequencies below 4688Hz and above 9.6Mhz.&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;range&#34;&gt;Range&lt;/h5&gt;
&lt;p&gt;Range effectively determines the frequency of the signal at the GPIO pin. This means that the frequency at the pin is defined by the ratio of &lt;code&gt;PWM Clock Frequency/Range&lt;/code&gt;. Another thing range determines is the resolution of the signal going to the device. Recall that Duty Cycle is the ratio of Pulse Width to Range. Starting with a lower value of range, say 4, limits duty cycle to 0%, 25%, 50%, 75%, or 100%. To say it a different way, with a Range of 4 the only values for Pulse Width that make sense are 0, 1, 2, 3, 4. This in turn limits things like the range of LED brightness or blinking that&amp;rsquo;s available.&lt;/p&gt;
&lt;p&gt;Since range impacts frequency at the pin &lt;em&gt;and&lt;/em&gt; the resolution, it is important to choose the correct PWM clock frequency, Range, and Pulse Width in combination. Starting with a low PWM Clock frequency limits the choice of range which in turn limits the available duty cycles.&lt;/p&gt;
&lt;p&gt;As an example let&amp;rsquo;s choose 2 extremes. For the first let&amp;rsquo;s choose a PWM Clock frequency of 5kHz and a range of 5. The resolution is 5. This means are only 5 available duty cycles including full on and full off. As described above this limits the available brightness settings for a light like an LED.&lt;/p&gt;
&lt;p&gt;Here are the settings to try this example &lt;em&gt;(the settings for the second example are in parentheses)&lt;/em&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Go&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PWM Pin&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Non-PWM Pin&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock Frequency/Clock Divisor&lt;/td&gt;
&lt;td&gt;5000 (600000)&lt;/td&gt;
&lt;td&gt;3840 (32)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Mode&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;5 (10000)&lt;/td&gt;
&lt;td&gt;5 (10000)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pulse Width&lt;/td&gt;
&lt;td&gt;1 (5, 2, 100, 1000, 10000)&lt;/td&gt;
&lt;td&gt;1 (5, 2, 100, 1000, 10000)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Type&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then change to Pulse Width to 5. This will be the brightest setting of the LED. While it is noticably brighter than a Pulse Width of 1, due to the narrow range it&amp;rsquo;s not that much brighter.&lt;/p&gt;
&lt;p&gt;At the other extreme let&amp;rsquo;s configure an LED for an extremely smooth transition from off to full brightness. This will require a higher resolution. Let&amp;rsquo;s go crazy and decide that we&amp;rsquo;d like to have 10,000 steps of brightness available. This translates to a range of 10,000. To avoid visible flickering we need to have at least a 60Hz signal at the GPIO pin. Since the ratio of &lt;code&gt;PWM Clock Frequency/Range&lt;/code&gt; determines the signal frequency at the pin, we will need a PWM Clock frequency of at least 600kHz. A range of 10000 times a minimum pin signal frequency of 60Hz is 600kHz (10,000 * 60 = 600,000). To check our work, &lt;code&gt;PWM Clock Frequency / Range&lt;/code&gt;, 600,000 / 10,000 = 60 (Hz).&lt;/p&gt;
&lt;h5 id=&#34;pulse-width&#34;&gt;Pulse width&lt;/h5&gt;
&lt;p&gt;At higher GPIO pin frequencies pulse width effects the brightness of an LED. At lower GPIO pin frequencies pulse width is visible as the length of time the LED is on vs. the blink rate. Let&amp;rsquo;s again use extreme examples to illustrate this.&lt;/p&gt;
&lt;p&gt;For the first example let&amp;rsquo;s use a PWM clock frequency of 1MHz and a range of 10,000. The frequency at the GPIO pin will be 100Hz 1,000,000/10,000), fast enough that no blinking or flickering will be visible. The range of 10,000 is likewise high enough that we won&amp;rsquo;t be able to discern discrete steps in the brightness of the LED.&lt;/p&gt;
&lt;p&gt;Here are the settings for the first example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Go&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PWM Pin&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Non-PWM Pin&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock Frequency/Clock Divisor&lt;/td&gt;
&lt;td&gt;1000000 (5000)&lt;/td&gt;
&lt;td&gt;19 (3840)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Mode&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;td&gt;markspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pulse Width&lt;/td&gt;
&lt;td&gt;100 (5000)&lt;/td&gt;
&lt;td&gt;100 (5000)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Type&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For the second example change the Clock Frequency (Go) to 5000, Clock Divisor (C) to 3840, the Range to 10000 and the Pulse Width to 5000. The LED will flash for a very short period of time and will repeat flashing about once every 2 seconds (Clock Frequency/Range, 5000/10000 = 0.5Hz or once every 2 seconds). Now change the Pulse Width to 5000. Now the LED will be on for 1 second and off for 1 second. This changed the duty cycle from 2% to 50% with the corresponding change in the duration of the LED flash. This example shows how to create a blinking light using PWM, just choose a PWM Clock Frequency and range that result in a very low GPIO pin frequency, well below 60Hz.&lt;/p&gt;
&lt;h5 id=&#34;pwm-mode&#34;&gt;PWM Mode&lt;/h5&gt;
&lt;p&gt;The available PWM modes are balanced and mark/space. Recall that with mark/space the signal is either on or off (high or low) for a fixed duration within the range. For example, with a duty cycle of 50% and a range of 10, the signal will be on for 5 consecutive seconds and off for 5 consecutive seconds. As explained above, balanced mode will spread this 50% duty cycle evenly across the range which will make the effects of the duty cycle less apparent, except for a dimming of the LED (e.g., a 10ms pulse, every 10ms, 500 times over 10 seconds).&lt;/p&gt;
&lt;p&gt;To illustrate this behavior set the Clock Frequency to 4688 (Go), Clock Divisor to 4095 (C), the PWM Mode to markspace, the Range to 1000, the Pulse Width to 10, and the PWM Type to hardware. This results in a blinking LED at a pin frequency of about 4.69Hz, or almost 5/second. Now change the PWM Mode to balanced. The language must be C to use balanced mode as go-rpio only supports mark/space. Now the blinking is no longer apparent.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Go&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PWM Pin&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Non-PWM Pin&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock Frequency/Clock Divisor&lt;/td&gt;
&lt;td&gt;4688&lt;/td&gt;
&lt;td&gt;4095&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Mode&lt;/td&gt;
&lt;td&gt;markspace (&lt;del&gt;balanced&lt;/del&gt;)&lt;/td&gt;
&lt;td&gt;markspace (balanced)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pulse Width&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PWM Type&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;pwm-type&#34;&gt;PWM Type&lt;/h5&gt;
&lt;p&gt;The available PWM Types are &lt;em&gt;hardware&lt;/em&gt; and &lt;em&gt;software&lt;/em&gt;. The examples above used hardware PWM only. This is because true balanced mode is only available on hardware. In addition, the software PWM as implemented in Go and C is more akin to balanced mode and definitely not mark/space. Both the Go and C versions have a hardcoded 100MHz clock. Some of the examples in previous sections rely on mark/space behavior, especially the PWM Mode section.&lt;/p&gt;
&lt;h5 id=&#34;other-things-to-try&#34;&gt;Other things to try&lt;/h5&gt;
&lt;p&gt;To see how the above works with non-PWM pins, try some or all of the above on non-hardware PWM pins using a PWM Type of software. Monitoring CPU usage during these tests might show some differences between CPU usage for hardware vs. software PWM.&lt;/p&gt;
&lt;h5 id=&#34;pwm-explorer-code&#34;&gt;PWM Explorer code&lt;/h5&gt;
&lt;p&gt;The code in the &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;PWM Explorer&lt;/a&gt; GitHub respository is extensively commented. To avoid repeating what is best illustrated directly in the code there&amp;rsquo;s not much to say here. The structure of both programs is substantially similar although there are differences is how the Go and C libraries are used to accomplish the same task.&lt;/p&gt;
&lt;h5 id=&#34;key-takeaways&#34;&gt;Key takeaways&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;On the Raspberry Pi there are only 4 hardware PWM pins and 2 channels. There are 2 pins per channel. This reduces the number of effective hardware PWM pins to 2.&lt;/li&gt;
&lt;li&gt;Care must be taken when specifying the Clock Frequency or Clock Divisor. The acceptable range for PWM Clock frequency is 4688Hz to 9.6Mhz.&lt;/li&gt;
&lt;li&gt;Range determines both the frequency at the GPIO pin and the resolution of the signal to a device like an LED or motor. The first, frequency, is significant because at lower pin frequencies the on/off states of the pin become very apparent, as in a blinking LED light. The second, resolution, is important because it defines how fine grained the control of the device will be. For example, at low resolutions there are only a limited set of LED brightnesses that can be chosen and the differences are very apparent. At higher resolutions small changes in pulse width will result in a very small, hardly discernable, change in brightness. This is important when implementing something like a dimmer where the change in brightness from off to fully on should not change in large, discernable steps of brightness. I.e., a smoother transition through the range is desired.&lt;/li&gt;
&lt;li&gt;For higher resolutions (Range) a higher PWM clock frequency should be chosen. This ensures that the GPIO pin frequency won&amp;rsquo;t drop too low, e.g., below the 60Hz frequency needed to avoid a flickering LED light.&lt;/li&gt;
&lt;li&gt;At higher GPIO pin frequencies (e.g., above 60Hz) changing the pulse width will cause the LED to appear dimmer or brighter.&lt;/li&gt;
&lt;li&gt;At lower GPIO pin frequencies (e.g., below 60Hz, and especially below 10Hz) pulse width can be used to cause obvious pulsing, as in a blinking LED light. The length of time the light is on is directly proportional to the pulse width.&lt;/li&gt;
&lt;li&gt;Choice of PWM mode also impacts the &amp;ldquo;smoothness&amp;rdquo; of the signal. Even at low GPIO frequencies, which would normally cause an LED to blink, balanced mode will reduce that effect, often to the point of rendering it unnoticable.&lt;/li&gt;
&lt;li&gt;PWM type (software vs. hardware) can affect the consistency of the period of a PWM signal to the point that even above 60Hz an LED might noticably flicker. It can also result in an inordinate amount of CPU load needed to support the desired clock rate.&lt;/li&gt;
&lt;li&gt;Software PWM can be used, but the resulting signal can be too ragged to be used in some devices.&lt;/li&gt;
&lt;li&gt;Setting a range that is greater than the PWM Clock frequency may seem odd, but it can be used effectively to create a low frequency, pulsing signal that can be used for, among other things, causing an LED to blink.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Hopefully by now you have enough knowledge to start effectively using PWM on a Raspberry Pi 3B+, or perhaps on other Raspberry Pi models or even on other platforms entirely. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;ve gone through the various terms so you should now be able to read most of the literature on PWM and understand the concepts and terms used in those sources.&lt;/li&gt;
&lt;li&gt;If you followed along setting up and experimenting with PWM on your Raspberry Pi you now have a full, working, GPIO test bed installed on your Raspberry Pi.&lt;/li&gt;
&lt;li&gt;You should have an understanding of the various PWM settings and how they interact with each other.&lt;/li&gt;
&lt;li&gt;If you used the &lt;em&gt;PWM Explorer&lt;/em&gt; application you have valuable hands-on experience with using various combinations of PWM settings. You can continue to use the &lt;em&gt;PWM Explorer&lt;/em&gt; to experiment with various settings when you have questions or to test assumptions.&lt;/li&gt;
&lt;li&gt;By reading the Go and/or C code you now know how to effectively use the go-rpio and/or WiringPi libraries. Even if you decide to use other libraries, like pigpio&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;, you should understand the terminology well enough to use them effectively, or at least have a good start on learning how to use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;PWM Explorer&lt;/a&gt; is an application that accompanies this article that can be used to experiment with various PWM settings. It demonstrates PWM using both Go and C libraries. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.allaboutcircuits.com/technical-articles/introduction-to-microcontroller-timers-pwm-timers/&#34;&gt;Introduction to Microcontroller Timers: Periodic Timers&lt;/a&gt; is a good general introduction to timers. PWM hardware is one type of periodic timer. It is useful to read this introduction. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.allaboutcircuits.com/technical-articles/introduction-to-microcontroller-timers-pwm-timers/&#34;&gt;Pulse-width Modulation (PWM) Timers in Microcontrollers&lt;/a&gt; is a good detailed discussion about PWM timers. It&amp;rsquo;s an excellent read if you want more detail than presented here. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iot-programmer.com/index.php/books/22-raspberry-pi-and-the-iot-in-c/chapters-raspberry-pi-and-the-iot-in-c/60-raspberry-pi-and-the-iot-in-c-pulse-width-modulation-servos-and-more&#34;&gt;Raspberry Pi And The IoT In C - - Pulse Width Modulation, Servos And More&lt;/a&gt; is a detailed book about programming GPIO on the Raspberry Pi. There is a chapter devoted to PWM. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WiringPi/WiringPi&#34;&gt;WiringPi&lt;/a&gt; is a C library for GPIO programming &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; is a Go library for GPIO programming &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.airspayce.com/mikem/bcm2835/&#34;&gt;bcm2835 by Mike McCalley&lt;/a&gt; is another C library for GPIO programming. &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://abyz.me.uk/rpi/pigpio/pdif2.html&#34;&gt;pigpio&lt;/a&gt; is primarily a Python library. It also has a C library. It has the distinction of performing hardware PWM on any GPIO pin. I&amp;rsquo;m not sure how it does this. &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up&#34;&gt;Setting up your Raspberry Pi&lt;/a&gt; is the official documentation for getting started with a Raspberry Pi including things like required hardware as well as how to install the OS and other important details. &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://wiki.sunfounder.cc/index.php?title=Breadboard_Basics_%E2%80%93_Types&#34;&gt;Breadboard Basics - Types&lt;/a&gt; is a useful introduction to breadboards and how to use them. &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://wiringpi.com/reference/&#34;&gt;WiringPi library reference guide&lt;/a&gt; documents the main WiringPi functions. The rest of the website also has some useful information. &lt;a href=&#34;#fnref:11&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:12&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Frequency#CITEREFSerwayFaughn1989&#34;&gt;Frequency page on Wikipedia&lt;/a&gt; discusses frequency and period &lt;a href=&#34;#fnref:12&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:13&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A &lt;a href=&#34;https://www.sensorsone.com/frequency-to-period-calculator/&#34;&gt;Frequency to Period Calculator&lt;/a&gt; is handy for quick calculations, or validation, of frequency to period conversion (period = 1/frequency). &lt;a href=&#34;#fnref:13&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:14&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf&#34;&gt;full Broadcom spec for the BCM2835&lt;/a&gt;, starting at page 138, for more details about how PWM is implemented on the BCM2835. &lt;a href=&#34;#fnref:14&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:15&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There&amp;rsquo;s a detailed discussion about &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=150254&#34;&gt;Which pin(s) on RPi 3B is PWM capable&lt;/a&gt;. Specifically regarding the effect of sharing 2 PWM channels for 4 PWM pins. The Broadcom spec&lt;sup id=&#34;fnref:14&#34;&gt;&lt;a href=&#34;#fn:14&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;14&lt;/a&gt;&lt;/sup&gt; also discusses this in section 9.4 on page 139, but in a less obvious way. &lt;a href=&#34;#fnref:15&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:16&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There is a 3rd way to generate PWM signals, &lt;a href=&#34;https://stackoverflow.com/questions/50427275/raspberry-how-does-the-pwm-via-dma-work&#34;&gt;DMA or Direct Memory Access&lt;/a&gt;. It won&amp;rsquo;t be discussed here in this article. &lt;a href=&#34;#fnref:16&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:17&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://pinout.xyz/&#34;&gt;RaspberryPPi Pinout&lt;/a&gt; is a good source that describes each pins&amp;rsquo; role, physical pin number, and for GPIO pins the GPIO pin number for the BCM2835 board. It has tabs that can be used to highlight which pins serve which purpose, e.g., PWM pins. &lt;a href=&#34;#fnref:17&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:18&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://jared.geek.nz/2013/feb/linear-led-pwm&#34;&gt;Linear LED PWM&lt;/a&gt; provides guidelines/formulas for getting linear scaling when changing the brightness of an LED via PWM. Googling &amp;ldquo;LED PWM linear brightness&amp;rdquo; brings up several other articles as well. &lt;a href=&#34;#fnref:18&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:19&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://raspberrypi.stackexchange.com/questions/53854/driving-pwm-output-frequency&#34;&gt;Driving PWM output frequency&lt;/a&gt; provides some interesting information and discussion on Raspberry Pis with 26 and 40 GPIO pins. &lt;a href=&#34;#fnref:19&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi GPIO in Go and C - Blinking LED</title>
      <link>https://youngkin.github.io/post/sunfoundergpionotesled/</link>
      <pubDate>Fri, 01 Oct 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/sunfoundergpionotesled/</guid>
      <description>&lt;p&gt;This is the first article in a series that explores GPIO programming on a Raspberry Pi 3B+. You can find the full series &lt;a href=&#34;../../categories/gpio&#34;&gt;here&lt;/a&gt;. It is a supplement to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;Sunfounder Blinking LED project&lt;/a&gt;. The code samples will be in Go and C.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I recently became interested in GPIO programming on a Raspberry Pi. It&amp;rsquo;s a nice way to see something concrete controlled by software. It&amp;rsquo;s also a nice way to learn a little bit about electronics. This is the first article in a series I intend to write to document my journey in GPIO programming.&lt;/p&gt;
&lt;p&gt;To lower the bar to getting started I decided to purchase a GPIO/electronics kit and repurpose one of my Raspberry Pis. I chose &lt;a href=&#34;https://www.sunfounder.com/&#34;&gt;Sunfounder&lt;/a&gt;, mostly because they seem to be well regarded and their kits get good reviews. I ended up choosing the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt; (AKA Raphael)  because it has a good number of interesting electronic components and associated projects.&lt;/p&gt;
&lt;p&gt;One thing I noticed right away is that most GPIO articles assume Python for the programming language. Sunfounder&amp;rsquo;s kits and associated documentation support a number of languages including Python and C, but they lean towards Python and more projects are available in Python and not so many in C. I&amp;rsquo;m primarily a Go developer so I&amp;rsquo;m also interested in implementing GPIO projects in Go.&lt;/p&gt;
&lt;p&gt;Some of the Sunfounder kit reviews mention that the project documentation is a little sparse and short on explaining how things work. I&amp;rsquo;m just getting started and I&amp;rsquo;ve seen a little of this, but the first project, &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;Sunfounder Blinking LED project&lt;/a&gt;, is pretty well documented. I only got hung up in a couple of spots and it didn&amp;rsquo;t take long for me to figure out what I did wrong. The second project, &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;RGB LED&lt;/a&gt; was a bit different. It&amp;rsquo;s more complicated and much less detailed regarding explaining how and why things work. If all you want to do is follow a cookbook to implement the project it works well enough. But it&amp;rsquo;s lacking if you want to understand how and why it works in more detail. I spent quite a while working on this one trying to fill in the information missing from the project documentation. The point of this series is to fill that gap, from both coding and electronic perspectives.&lt;/p&gt;
&lt;p&gt;The focus of this article is the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;Sunfounder Blinking LED project&lt;/a&gt;. It&amp;rsquo;s the first project in a &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/introduction.html&#34;&gt;set of projects targeting the Ultimate Starter/Raphael kit&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t have one, you&amp;rsquo;ll need a Raspberry Pi. I used a Raspberry Pi 3B+ with the &amp;lsquo;stretch&amp;rsquo; version of the Raspbian OS. Given that the Sunfounder Ultimate Starter Kit is advertised to work with a Raspberry Pi 4, I would expect the 4 series to work as well. I&amp;rsquo;m less sure about other Raspberry Pi versions, especially versions with 26 vs. 40 GPIO pins.&lt;/p&gt;
&lt;p&gt;Next you&amp;rsquo;ll need is a &lt;a href=&#34;https://www.amazon.com/dp/B082KBF7MM/ref=sspa_dk_detail_4?psc=1&amp;amp;pd_rd_i=B082KBF7MM&amp;amp;pd_rd_w=1tGTV&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=fX8JB&amp;amp;pf_rd_r=44DE0RS1E9FD42RBYC7R&amp;amp;pd_rd_r=47cbdc7f-7834-455f-9429-ef74a438bd45&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFVVkdZVUZRNUw3ODkmZW5jcnlwdGVkSWQ9QTA4MzI4MzYyU0VLNzBJM0cxRUVMJmVuY3J5cHRlZEFkSWQ9QTA0Mjk1NTMzSzNSWlNFUjU0NURBJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;breadboard&lt;/a&gt;, some &lt;a href=&#34;https://www.amazon.com/dp/B08HZ26ZLF/ref=syn_sd_onsite_desktop_19?psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExRFpLWElCRjg1MUNMJmVuY3J5cHRlZElkPUEwMjMyMTE1M01aOFE3U1BQS09YSiZlbmNyeXB0ZWRBZElkPUEwODE5NTMxMktEMTlZRjEyQjBJNiZ3aWRnZXROYW1lPXNkX29uc2l0ZV9kZXNrdG9wJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;jumper wires&lt;/a&gt;, &lt;a href=&#34;https://www.amazon.com/ELEGOO-Electronics-Component-resistors-Potentiometer/dp/B01ERPXFZK/ref=sr_1_7_sspa?crid=3EJQNCOWP00IF&amp;amp;dchild=1&amp;amp;keywords=resistors&amp;amp;qid=1631478270&amp;amp;s=industrial&amp;amp;sprefix=resis%2Cindustrial%2C219&amp;amp;sr=1-7-spons&amp;amp;psc=1&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEzTktVSzNYMkxMSDlKJmVuY3J5cHRlZElkPUEwMjAzMDY0NVRERkFLVjVRTUFWJmVuY3J5cHRlZEFkSWQ9QTA5MjM2NjUxUFZYQUlETVAzRDA3JndpZGdldE5hbWU9c3BfbXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;a 220 Ohm resistor, and an LED&lt;/a&gt;. You should also consider getting a &lt;a href=&#34;https://www.amazon.com/dp/B082PRVRYR/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B082PRVRYR&amp;amp;pd_rd_w=8mKhr&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=e9psa&amp;amp;pf_rd_r=S09F37DF2G5FW8B8GX4B&amp;amp;pd_rd_r=c065c120-e60b-45e9-b93b-f581f048cf46&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFCMzhUQ09COFI2VlMmZW5jcnlwdGVkSWQ9QTA5NjU2ODUxRDkxNEYwSTYwV09KJmVuY3J5cHRlZEFkSWQ9QTAxOTg1MTUyRUhEUlc2VzQ2VDQ4JndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;40 pin female to female with a T-Type adapter&lt;/a&gt; to attach the GPIO outputs to the breadboard. You can use only jumper wires, but the cable will make things easier and will help prevent damage to the GPIO pins on the Raspberry Pi. If you elect not to buy the 40 pin cable with T-Type adapter you&amp;rsquo;ll need to buy &lt;a href=&#34;https://www.amazon.com/SinLoon-Breadboard-Arduino-Circuit-40-Pack/dp/B08M3QLL3Q/ref=pd_sbs_7/143-0445142-7950409?pd_rd_w=sVLrc&amp;amp;pf_rd_p=8b76d7a7-ab83-4ddc-a92d-e3e33bfdbf03&amp;amp;pf_rd_r=CDM5TGJT03VKF0ZFB577&amp;amp;pd_rd_r=8e58fd82-8503-41cf-b8f2-c78eaeb78d25&amp;amp;pd_rd_wg=tT1U0&amp;amp;pd_rd_i=B08M3QLL3Q&amp;amp;psc=1&#34;&gt;male-to-female jumper wires&lt;/a&gt;. Buying all these things separately will cost more than a kit however. &lt;a href=&#34;https://www.amazon.com/dp/B06WP7169Y/ref=sspa_dk_detail_5?psc=1&amp;amp;pd_rd_i=B06WP7169Y&amp;amp;pd_rd_w=OZVyf&amp;amp;pf_rd_p=887084a2-5c34-4113-a4f8-b7947847c308&amp;amp;pd_rd_wg=0V0IH&amp;amp;pf_rd_r=623YJTBQ2CN2B2GYXQG5&amp;amp;pd_rd_r=faa61f0f-3aec-4cf0-8e7e-d44eb1b3b92f&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyUVlDQzMzVVZBMFYxJmVuY3J5cHRlZElkPUEwMzExNzk4MUhGSjFSS0VKTlBROCZlbmNyeXB0ZWRBZElkPUEwMzYwNjg2UUdMRU44N0YzNzIwJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==&#34;&gt;Here&amp;rsquo;s a simple kit that has all of the above&lt;/a&gt;. If you expect to follow this series I recommend buying the &lt;a href=&#34;https://www.amazon.com/gp/product/B09BMVT4CB/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;Sunfounder Raspberry Pi Ultimate Starter Kit&lt;/a&gt;.&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/RaphaelKit.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Ultimate Starter/Raphael kit&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;To compile and run the C program you&amp;rsquo;ll need the WiringPi libary. It&amp;rsquo;s easy to get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install wiringpi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then test the installation using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi@pi-node1:~/go/src/github.com/youngkin/gpio/rgbled $ gpio -v
gpio version: 2.50
Copyright (c) 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3B+, Revision: 03, Memory: 1024MB, Maker: Sony
  * Device tree is enabled.
  *--&amp;gt; Raspberry Pi 3 Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above you&amp;rsquo;ll notice &lt;code&gt;gpio version: 2.50&lt;/code&gt;. If you&amp;rsquo;re using a Rasberry Pi 4, use the instructions given in the Sunfounder &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/check_the_wiringpi_c.html&#34;&gt;Checking the WiringPi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also need some basic C and Go programming knowledge as well as familiarity with logging on to a Raspberry Pi terminal, or into the desktop GUI that comes with some OS versions. Depending on the approach you take, you may need to connect a keyboard and monitor to the Raspberry Pi. I simply SSH into the Pi. You&amp;rsquo;ll also need familiarity with how to use an editor like Vi or nano.&lt;/p&gt;
&lt;p&gt;I chose not to download the code from the Sunfounder site, preferring to write my own instead, even if all I did was copy directly from the project documentation. Due to this I created my own location to create the code. In fact, &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;my code is in Github&lt;/a&gt;. If you do like downloading code you have the option of downloading, cloning, or forking it from my Github repository. As an added bonus, the project code written in Go is also located there. The code for this project is located at &lt;a href=&#34;https://github.com/youngkin/gpio/tree/main/ledblink&#34;&gt;gpio/ledblink&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Go development on a Raspberry Pi you&amp;rsquo;ll need to install the development environment onto the Raspberry Pi. &lt;a href=&#34;https://www.jeremymorgan.com/tutorials/raspberry-pi/install-go-raspberry-pi/&#34;&gt;Here&amp;rsquo;s a simple source&lt;/a&gt; that explains how to accomplish this. This source is a little dated, but the only significant issue is with the version of Go to install. The source shows installing Go &lt;strong&gt;1.14.4.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.14.4.linuxarmv6l.tar.gz&lt;/strong&gt;. The current versions are &lt;strong&gt;1.17.1.linux-arm64.tar.gz&lt;/strong&gt; and &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. For the Raspberry Pi 3B+ the correct choice will be &lt;strong&gt;1.17.1.linuxarmv6l.tar.gz&lt;/strong&gt;. The other is intended for 64 bit systems like the Raspberry Pi 4 series.&lt;/p&gt;
&lt;p&gt;Finally, I&amp;rsquo;m assuming a basic knowledge of Linux if you want to veer away from the cookbook style of the Sunfounder docs. For example, I won&amp;rsquo;t be explaining what &lt;strong&gt;root privileges&lt;/strong&gt; are.&lt;/p&gt;
&lt;h2 id=&#34;blinking-led-in-c&#34;&gt;Blinking LED in C&lt;/h2&gt;
&lt;p&gt;As mentioned above, this article is about the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html&#34;&gt;Blinking LED project&lt;/a&gt;. The Sunfounder documentation for this project is quite good. You should start with the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/introduction.html&#34;&gt;Introduction&lt;/a&gt; and work your way through the following sections up to and including the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/play_with_c.html&#34;&gt;Play with C&lt;/a&gt; section. You should set up the breadboard as described in the project documentation or in the diagram below:&lt;/p&gt;
&lt;img style=&#34;border:1px solid black&#34; src=&#34;https://youngkin.github.io/images/pwmfordummies/blinkingLED.png&#34; align=&#34;center&#34; width=&#34;600&#34; height=&#34;300&#34;/&gt;
&lt;figcaption align=&#34;left&#34;&gt;&lt;center&gt;&lt;i style=&#34;color:black;&#34;&gt;Sunfounder Blinking LED breadboard setup&lt;/i&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;p&gt;Since the Sunfounder project documentation is so good, I only have a couple of comments.&lt;/p&gt;
&lt;h3 id=&#34;information-that-would-have-been-helpful&#34;&gt;Information that would have been helpful&lt;/h3&gt;
&lt;p&gt;The documentation for the project states &amp;ldquo;&lt;em&gt;Therefore, to turn on an LED, we need to make GPIO17 low (0V) level.&lt;/em&gt;&amp;rdquo;. What it doesn&amp;rsquo;t explain is why. The reason is that the 220 Ohm resistor is connected on one side to a 3.3 volt power source and the LED anode (positive terminal) on the other. And GPIO17 is connected to the LED&amp;rsquo;s cathode (negative terminal). LEDs only illuminate when current flows from the anode to the cathode. GPIO pins on the Raspberry Pi, e.g., GPIO17, generally have a default state of HIGH (3.3 volts). With the connection of the 3.3 volt power source to the anode and the 3.3 volt GPIO17 pin on the cathode side, no current will flow through the circuit. So the LED will not turn on. Setting GPIO17 to LOW, 0 volts, allows the current to flow, lighting the LED.&lt;/p&gt;
&lt;p&gt;This is a minor point, but the program does not need to be run with root (sudo) privileges. Simply running &lt;code&gt;./BlinkingLed&lt;/code&gt;, vs. &lt;code&gt;sudo ./BlinkingLed&lt;/code&gt;, will work. This is not always true for GPIO programs. I&amp;rsquo;ll point that out when running a program that does require root privileges.&lt;/p&gt;
&lt;h2 id=&#34;blinking-led-in-go&#34;&gt;Blinking LED in Go&lt;/h2&gt;
&lt;p&gt;This version of Blinking LED will work with the same breadboard setup as the C version.&lt;/p&gt;
&lt;p&gt;First things first, we need a Go library to drive the GPIO interface. I&amp;rsquo;m using &lt;a href=&#34;https://github.com/stianeikeland/go-rpio&#34;&gt;go-rpio&lt;/a&gt; for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It seems to be in fairly wide use&lt;/li&gt;
&lt;li&gt;It seems to be fairly complete&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s relatively active&lt;/li&gt;
&lt;li&gt;It comes with example code and good documentation&lt;/li&gt;
&lt;li&gt;Its API is similar to WiringPi&amp;rsquo;s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another option is &lt;a href=&#34;https://github.com/periph/host&#34;&gt;periph&lt;/a&gt; (code) with &lt;a href=&#34;https://periph.io/&#34;&gt;documentation&lt;/a&gt;. It is more active and the documentation is very good, better than go-rpio. This project would be trivial to do using periph. Overall, for the LED examples I was able to find, go-rpio better matched what I was looking for, especially with regard to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.2_rgb_led_c.html&#34;&gt;RGB LED&lt;/a&gt; using Pulse Width Modulation (PWM, more on this in the next article in the series). But this is an excellent alternative to go-rpio and vice-versa.&lt;/p&gt;
&lt;p&gt;You can just use the &lt;a href=&#34;https://github.com/stianeikeland/go-rpio/blob/master/examples/blinker/blinker.go&#34;&gt;rpio-go blinker.go example&lt;/a&gt;. It uses &lt;code&gt;rpio.Pin.Toggle()&lt;/code&gt;. I created a &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;Github respository&lt;/a&gt; that contains examples in both C and Go. My Go version of &lt;code&gt;blinker&lt;/code&gt; uses direct writes instead of &lt;code&gt;rpio.Pin.Toggle&lt;/code&gt;. I thought showing an optional way to do this would be helpful, especially since later projects will use direct writes. My &lt;a href=&#34;https://github.com/youngkin/gpio&#34;&gt;gpio respository&lt;/a&gt; uses Go&amp;rsquo;s module system which will automatically download the &lt;code&gt;rpio-go&lt;/code&gt; library when built. Here&amp;rsquo;s my version of &lt;code&gt;blinker&lt;/code&gt;. I won&amp;rsquo;t be explaining Go sytax as I&amp;rsquo;m assuming familiarity with Go.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Copyright (c) 2021 Richard Youngkin. All rights reserved.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Use of this source code is governed by a MIT-style
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// license that can be found in the LICENSE file.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Run using &amp;#39;go run blinkingled.go&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
 &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/stianeikeland/go-rpio/v4&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; )
 &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
 &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize the go-rpio library. By default it uses BCM pin numbering.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rpio&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
 &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
 &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
 &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;     }
 &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Release resources held by the go-rpio library obtained above after
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;main()&amp;#39; exits.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rpio&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
 &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Select the GPIO pin to use, BCM pin 17
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rpio&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pin&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)
 &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Set the pin (BCM pin 17) to OUTPUT mode to allow writes to the pin,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// e.g., set the pin to LOW or HIGH
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;()
 &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
 &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Setting the GPIO pin to LOW allows current to flow from the power source thru
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// the anode to cathode turning on the LED.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Low&lt;/span&gt;()
 &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//        pin.Write(rpio.Low)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LED on, Pin value should be 0: %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;())
 &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
 &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;High&lt;/span&gt;()
 &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//        pin.Write(rpio.High)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\tLED off, Pin value should be 1: %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;())
 &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Millisecond&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
 &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;     }
 &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Turn off the LED
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;High&lt;/span&gt;()
 &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line 15 imports the &lt;code&gt;rpio-go&lt;/code&gt; library&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/stianeikeland/go-rpio/v4&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of the program is explained through embedded comments. The program can be run typing &lt;code&gt;go run blinkingled.go&lt;/code&gt; at the command prompt and hitting enter.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This article has shown how to configure a breadboard with an LED that can be controlled by programs written in both C and Go. Feel free to suggest changes or ask questions in the comments section below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create Secure Clients and Servers in Golang Using HTTPS</title>
      <link>https://youngkin.github.io/post/gohttpsclientserver/</link>
      <pubDate>Sun, 20 Sep 2020 13:09:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/gohttpsclientserver/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The purpose of this article is to show how to write secure web services and clients using Go and HTTPS. In researching how to accomplish this I came across numerous articles and gists. However, none of them provided the complete picture I needed to implement a robust client or server. Most of them only provided terse code examples with equally terse examples regarding how to create the certificates needed for the code to work. Others were oriented to gRPC or plain TLS over TCP. I also wanted to understand what I was doing, not just the syntax. The point of this article is to provide not only the &lt;em&gt;how&lt;/em&gt;, but also the &lt;em&gt;why&amp;rsquo;s&lt;/em&gt; behind the &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re new to HTTPS, TLS, and public/private keys you might want to read the following &lt;em&gt;aside&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Security is paramount to ensure the privacy and well being of customers. They want to be certain that the information they provide, like passwords and credit card numbers, are going to the expected service provider. Likewise, it is sometimes necessary for service providers to ensure that they are communicating with the expected customer.&lt;/p&gt;
&lt;p&gt;There are two characteristics of secure communications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trust is the foundation of security. Without trust there can be no assurance that the parties to a conversation are not bad actors. Encryption is required to ensure that bad actors can&amp;rsquo;t listen in on a conversation and gain access to sensitive information or perform harmful actions.
The following requirements must be met to ensure trust and security:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trusted authorities must exist that can vouch for the identify of a client or a server&lt;/li&gt;
&lt;li&gt;Trusted sources of encryption technology that can be used by clients and servers to encrypt their communications must also exist&lt;/li&gt;
&lt;li&gt;Support in the code for the associated techniques and technologies that are used to implement client and server applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The umbrella for all these things is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Public_key_infrastructure&#34;&gt;Public Key Infrastructure(PKI)&lt;/a&gt;. There are four components to PKI that implement the requirements outlined above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public Key Encryption&lt;/strong&gt; - A public key can be safely shared by the owner, with another party, that provides the other party with the ability to encrypt and decrypt a conversation. The owner of a public key has a corresponding private key that is not shared. A public key can only decrypt information that was encrypted with the corresponding private key. Likewise, the private key is required to decrypt information that was encrypted with a public key. This asymmetric characteristic of the encryption guarantees that information can be securely shared between known parties to a conversation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Certificates&lt;/strong&gt; - contain the identity of the holder as well as the certificate owner&amp;rsquo;s public key. A certificate also includes information about the trusted authority that issued the certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Certificate Authorities(CA)&lt;/strong&gt; - are the trusted source of identity information. They can also issue certificates or delegate that authority to a Registration Authority.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Registration Authority (RA)&lt;/strong&gt; - are a trusted source of certificates. Any certificates issued by an RA will also contain the certificate of the CA that authorized them to issue certificates. This is required to ensure the trust requirement can be met. In other words, RAs themselves are only trusted because they can prove that they&amp;rsquo;re trusted by a CA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;create-certificates-and-keys&#34;&gt;Create certificates and keys&lt;/h2&gt;
&lt;p&gt;The basis for proving identity and encrypting information is a certificate and a corresponding Certificate Authority (CA). For the purposes of this article we&amp;rsquo;ll need both. There are two ways to go about obtaining these, the hard way and the easy way. The hard way is appropriate for real world applications. It involves registering a domain (e.g., &lt;code&gt;youngkin.com&lt;/code&gt;), obtaining DNS services for that domain, and obtaining a certificate for that domain. While not difficult it will require a fair amount of work and you&amp;rsquo;ll probably have to spend some money to register the domain.&lt;/p&gt;
&lt;p&gt;An easier way to provide a realistic experience is to create your own CA and obtain a certificate from this CA. This article uses CA signed certificates vs. self-signed certificates in order to create that more realistic experience. I found creating a CA, requesting certificates, and having the CA sign those certificates helpful in understanding the entire process.
Usually servers access CA certificates installed on the machine. This article will demonstrate how to register a CA certificate programmatically.&lt;/p&gt;
&lt;p&gt;There are at least a couple of tools available help us with the easy way, &lt;a href=&#34;https://github.com/square/certstrap&#34;&gt;certstrap&lt;/a&gt; and &lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34;&gt;easy-rsa&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The definitive command line tool for working with certificates is called &lt;code&gt;openssl&lt;/code&gt;. It can be used to create CAs, RAs, and certificates, as well as do many other useful things (see the references section for more details). It can also be used to create what are called self-signed certificates. &lt;a href=&#34;https://linuxize.com/post/creating-a-self-signed-ssl-certificate/&#34;&gt;Creating a Self-Signed SSL Certificate&lt;/a&gt; is a good resource for how to do this. While it is oriented towards Linux, there are versions of &lt;code&gt;openssl&lt;/code&gt; available on Windows and Mac machines. I recommend installing the Libre fork of &lt;code&gt;openssl&lt;/code&gt;. The reasoning behind this is well described in a &lt;a href=&#34;https://security.stackexchange.com/questions/112545/what-are-the-main-advantages-of-using-libressl-in-favor-of-openssl&#34;&gt;StackExchange question/answer&lt;/a&gt;. To verify whether you have Libre &lt;code&gt;openssl&lt;/code&gt; run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl version
LibreSSL 2.8.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output like the above indicates Libre &lt;code&gt;openssl&lt;/code&gt; is being used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Several files will be created during the certificate generation process, some with &lt;code&gt;.crt&lt;/code&gt; and &lt;code&gt;.key&lt;/code&gt; suffices. You may also see the suffix &lt;code&gt;.pem&lt;/code&gt; when reading about certificates. It&amp;rsquo;s worth noting that &lt;code&gt;.pem&lt;/code&gt; files are equivalent to &lt;code&gt;.crt&lt;/code&gt; and &lt;code&gt;.key&lt;/code&gt; files. &lt;strong&gt;PEM&lt;/strong&gt; is a file format. &lt;code&gt;.crt&lt;/code&gt; and &lt;code&gt;.key&lt;/code&gt; are hints as to what the file contains (certificates and keys), but these files all use the PEM format. See &lt;a href=&#34;https://stackoverflow.com/questions/62823792/how-to-get-crt-and-key-from-cert-pem-and-key-pem&#34;&gt;this StackOverflow discussion&lt;/a&gt; for more details about this.&lt;/p&gt;
&lt;h3 id=&#34;install-software-to-create-the-ca-and-certificates&#34;&gt;Install software to create the CA and certificate(s)&lt;/h3&gt;
&lt;p&gt;As mentioned above there are at least 2 options available to easily create a CA and a CA&amp;rsquo;s registered certificates. This article will use &lt;code&gt;certstrap&lt;/code&gt; for no other reason than it was written in Go. However, &lt;code&gt;easy-rsa&lt;/code&gt; is a good alternative.&lt;/p&gt;
&lt;p&gt;Before starting, download the appropriate executable from the &lt;a href=&#34;https://github.com/square/certstrap/releases&#34;&gt;certstrap releases&lt;/a&gt; page on GitHub. I placed mine in my &lt;code&gt;~/bin&lt;/code&gt; directory which is in my PATH. You&amp;rsquo;ll also need to make it executable (&lt;code&gt;chmod +x &amp;lt;downloadedfilename&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll follow the &lt;a href=&#34;https://github.com/square/certstrap&#34;&gt;usage instructions&lt;/a&gt; from the project&amp;rsquo;s README. At the end of this section we will have created a CA, a certificate and key for our server, and a certificate and key for our client. I keep all my certificates in a directory called &lt;code&gt;~/certs&lt;/code&gt;. All the following commands will be run from that directory. When prompted for the &lt;code&gt;passphrase&lt;/code&gt; just hit enter (i.e., no passphrase).&lt;/p&gt;
&lt;h3 id=&#34;create-the-ca&#34;&gt;Create the CA&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;~/certs certstrap init --common-name &amp;quot;ExampleCA&amp;quot;         
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Created out/ExampleCA.key
Created out/ExampleCA.crt
Created out/ExampleCA.crl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;init&lt;/code&gt; directs &lt;code&gt;certstrap&lt;/code&gt; to create a new CA. &lt;code&gt;--common-name&lt;/code&gt; (CN) specifies the name for the our CA, which is named &lt;em&gt;ExampleCA&lt;/em&gt;. Three files are created:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ExampleCA.key&lt;/code&gt; is the private key for &lt;em&gt;ExampleCA&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExampleCA.crt&lt;/code&gt; is the certificate for &lt;em&gt;ExampleCA&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExampleCA.crl&lt;/code&gt; is the certificate revocation list (CRL) for that CA. It contains a list of revoked certificates issued by the associated CA.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;&lt;strong&gt;Common Name&lt;/strong&gt;&lt;/em&gt; or CN is typically the fully qualified domain name (FQDN) of the host associated with a certificate (&lt;a href=&#34;https://jamielinux.com/docs/openssl-certificate-authority/sign-server-and-client-certificates.html&#34;&gt;not strictly true for client certificates&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://jamielinux.com/docs/openssl-certificate-authority/certificate-revocation-lists.html&#34;&gt;this source&lt;/a&gt; for information on certificate revocation lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;create-the-certificates-for-the-client-and-servers&#34;&gt;Create the certificates for the client and servers&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;~/certs certstrap request-cert --domain  &amp;quot;localhost&amp;quot;       
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Created out/localhost.key
Created out/localhost.csr

~/certs certstrap request-cert --domain  &amp;quot;client&amp;quot;
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Created out/client.key
Created out/client.csr
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;localhost&lt;/code&gt; is used as the domain for the server since, as noted above, a valid FQDN of the host is required for servers. &lt;code&gt;localhost&lt;/code&gt; suffices for this purpose. Using the &lt;code&gt;--domain&lt;/code&gt; flag will create a Subject Alternative Name (SAN) in addition to the CN in the certificate signing request (csr) and in the certificate itself. SANs are the current standard for specifying a number of methods for addressing a service, including by FQDN or domain name.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an  alternative to &lt;code&gt;--domain&lt;/code&gt;, &lt;code&gt;--common-name&lt;/code&gt;. We used &lt;code&gt;--common-name&lt;/code&gt; to create the CA above. &lt;code&gt;--common-name&lt;/code&gt; will only generate a CN. Starting in Go 1.15 certificates must contain a SAN entry or the https request will fail. Certificates with only a CN will not be accepted. If Go 1.15 or higher is used, and &lt;code&gt;--common-name&lt;/code&gt; is used to generate the CSR, you will likely see the following error from the client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get &amp;quot;https://localhost&amp;quot;: x509: certificate relies on legacy Common Name field, use SANs or temporarily enable Common Name matching with GODEBUG=x509ignoreCN=0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As noted in the error message, this problem can be overcome by prefixing the client command with &lt;code&gt;GODEBUG=x509ignoreCN=0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sign-the-certificates-for-the-client-and-servers&#34;&gt;Sign the certificates for the client and servers&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;~/certs certstrap sign localhost --CA ExampleCA  
Created out/localhost.crt from out/localhost.csr signed by out/ExampleCA.key

~/certs certstrap sign client --CA ExampleCA   
Created out/client.crt from out/client.csr signed by out/ExampleCA.key
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Please note that all certificates and associated keys were placed in the &lt;code&gt;./out&lt;/code&gt; directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Certificates must be signed by a trusted authority, in this case the CA, in order to be valid. Signing is a guarantee by the CA that the owner of the certificate is who they say they are. The &lt;code&gt;--CA&lt;/code&gt; flag above directs &lt;code&gt;certstrap&lt;/code&gt; to have the certificates signed by our Exa,mpleCA.&lt;/p&gt;
&lt;p&gt;At this point we have certificates and keys for the CA, the client, and the server.&lt;/p&gt;
&lt;h2 id=&#34;write-the-client-and-server&#34;&gt;Write the Client and Server&lt;/h2&gt;
&lt;p&gt;All code in this article is available at GitHub in my &lt;a href=&#34;https://github.com/youngkin/gohttps&#34;&gt;gohttps&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll write both a simple server that does no validation against a client&amp;rsquo;s certificate, as well as a more advanced server that is capable of a variety of options when validating a client&amp;rsquo;s certificate. Finally, we&amp;rsquo;ll develop a client that can talk to both servers.&lt;/p&gt;
&lt;p&gt;Before moving on we need to briefly discuss how HTTPS is implemented. HTTPS traffic is encrypted by the TLS layer. TLS is the successor to SSL and works on top of TCP/IP. It does a number of things including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Negotiates the TLS session. This involves negotiating the version of TLS and the encryption suite to be used.&lt;/li&gt;
&lt;li&gt;Validates the server&amp;rsquo;s identity&lt;/li&gt;
&lt;li&gt;If required, it validates the client&amp;rsquo;s identity&lt;/li&gt;
&lt;li&gt;Handles all traffic encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go&amp;rsquo;s HTTP package includes a TLS configuration struct that is used to implement a client&amp;rsquo;s and server&amp;rsquo;s HTTPS communication expectations. This will be a focus in the following sub-sections.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TLS requires a reliable transport mechanism. TCP and UDP are the 2 choices, but UDP is not reliable. See &lt;a href=&#34;https://security.stackexchange.com/questions/170833/why-does-tls-require-tcp&#34;&gt;Why does TLS require TCP&lt;/a&gt; for more discussion on this topic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;a-simple-server&#34;&gt;A simple server&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/youngkin/gohttps/blob/master/simpleserver/server.go&#34;&gt;GitHub&lt;/a&gt; for the complete implementation of the simple server.&lt;/p&gt;
&lt;p&gt;The simplest HTTPS interaction between a client and a server is one where the client validates the server&amp;rsquo;s credentials and where all traffic is encrypted. The client only requires access to the certificate for the CA that signed the server&amp;rsquo;s certificate. The server neither knows nor cares about the client&amp;rsquo;s identity. This is a pretty common use case.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the implementation of a very simple HTTPS server. The first thing to do is create and configure the &lt;code&gt;http.Server&lt;/code&gt; struct:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server := &amp;amp;http.Server{
    Addr:         &amp;quot;:&amp;quot; + *port,
    ReadTimeout:  5 * time.Minute, // 5 min to allow for delays when &#39;curl&#39; on OSx prompts for username/password
    WriteTimeout: 10 * time.Second,
    TLSConfig:    &amp;amp;tls.Config{ServerName: *host},
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Addr&lt;/code&gt; simply specifies the listening address for the server. &lt;code&gt;ReadTimeout&lt;/code&gt; and &lt;code&gt;WriteTimeout&lt;/code&gt; set the timeouts for reads and writes respectively. As the comment indicates, &lt;code&gt;ReadTimeout&lt;/code&gt; is set to 5 minutes to allow time for the entry of the machine&amp;rsquo;s user&amp;rsquo;s password. OSx sometimes prompts for this when &lt;code&gt;curl&lt;/code&gt; is used and the certificate is password protected. In this article none of the certificates are password protected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strictly speaking the timeout fields aren&amp;rsquo;t needed in a simple server such as this. That said, robust servers will include them. See &lt;a href=&#34;https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/&#34;&gt;The complete guide to Go net/http timeouts&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the context of this article, &lt;code&gt;TLSConfig&lt;/code&gt; is the most interesting field in the &lt;code&gt;Server&lt;/code&gt; struct. This is where all the TLS options are configured. In this case only &lt;code&gt;ServerName&lt;/code&gt; is required. &lt;code&gt;ServerName&lt;/code&gt; must match the hostname in the server&amp;rsquo;s certificate.&lt;/p&gt;
&lt;p&gt;The server needs a handler function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
    body, err := ioutil.ReadAll(r.Body)
    if err != nil {
        body = []byte(fmt.Sprintf(&amp;quot;error reading request body: %s&amp;quot;, err))
    }
    resp := fmt.Sprintf(&amp;quot;Hello, %s from Simple Server!&amp;quot;, body)
    w.Write([]byte(resp))
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There isn&amp;rsquo;t much to this handler function, it provides just the common &amp;ldquo;Hello, World!&amp;rdquo; response.&lt;/p&gt;
&lt;p&gt;The final step is for the server to begin listening for requests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if err := server.ListenAndServeTLS(*serverCert, *srvKey); err != nil {
    log.Fatal(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of the &lt;code&gt;ListenAndServe&lt;/code&gt; call in an HTTP server, an HTTPS server uses &lt;code&gt;ListenAndServeTLS&lt;/code&gt;. &lt;code&gt;*serverCert&lt;/code&gt; and &lt;code&gt;*srvKey&lt;/code&gt; are the server&amp;rsquo;s certificate and private key files respectively. The filenames containing these are passed in on the command line (more on that below). As you may recall, in this article &lt;code&gt;localhost.crt&lt;/code&gt; and &lt;code&gt;localhost.key&lt;/code&gt; are the certificate and key files we created for the servers.&lt;/p&gt;
&lt;h3 id=&#34;a-more-advanced-server&#34;&gt;A more advanced server&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/youngkin/gohttps/blob/master/advserver/server.go&#34;&gt;GitHub&lt;/a&gt; for the complete implementation of this more advanced server.&lt;/p&gt;
&lt;p&gt;The primary difference between the simple server above and a more secure server is the addition of the capability to require, or, require and validate, a client&amp;rsquo;s certificate.&lt;/p&gt;
&lt;p&gt;As before, an &lt;code&gt;http.Server&lt;/code&gt; struct is required:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server := &amp;amp;http.Server{
    Addr:         &amp;quot;:&amp;quot; + *port,
    ReadTimeout:  5 * time.Minute, // 5 min to allow for delays when &#39;curl&#39; on OSx prompts for username/password
    WriteTimeout: 10 * time.Second,
    TLSConfig:    getTLSConfig(*host, *caCert, tls.ClientAuthType(*certOpt)),
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice in this version the &lt;code&gt;TLSConfig&lt;/code&gt; field is being configured by a function, &lt;code&gt;getTLSConfig()&lt;/code&gt;. There&amp;rsquo;s a bit more to this &lt;code&gt;TLSConfig&lt;/code&gt; than in the simple server case. Here&amp;rsquo;s the code for the function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getTLSConfig(host, caCertFile string, certOpt tls.ClientAuthType) *tls.Config {
	var caCert []byte
	var err error
	var caCertPool *x509.CertPool
	if certOpt &amp;gt; tls.RequestClientCert {
		caCert, err = ioutil.ReadFile(caCertFile)
		if err != nil {
			log.Fatal(&amp;quot;Error opening cert file&amp;quot;, caCertFile, &amp;quot;, error &amp;quot;, err)
		}
		caCertPool = x509.NewCertPool()
		caCertPool.AppendCertsFromPEM(caCert)
	}

	return &amp;amp;tls.Config{
		ServerName: host,
		ClientAuth: certOpt,
		ClientCAs:  caCertPool,
		MinVersion: tls.VersionTLS12, // TLS versions below 1.2 are considered insecure - see https://www.rfc-editor.org/rfc/rfc7525.txt for details
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s break this down by sections. First let&amp;rsquo;s take a look at the function signature.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func getTLSConfig(host, caCertFile string, certOpt tls.ClientAuthType) *tls.Config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The arguments are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; - this is the server&amp;rsquo;s hostname. It must match the name provided in the host&amp;rsquo;s certificate. In our case this is the SAN.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;caCertFile&lt;/code&gt; - this is the certificate file name for the CA that signed the &lt;em&gt;&lt;strong&gt;client&amp;rsquo;s&lt;/strong&gt;&lt;/em&gt; certificate, in this case &lt;code&gt;ExampleCA.crt&lt;/code&gt;. The CA&amp;rsquo;s certificate is required in this server because we created an unknown CA, i.e., not a CA that&amp;rsquo;s normally configured in the OS (e.g.,  the KeyChain in OSx). So we need to add it here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;certopt&lt;/code&gt; - as can be seen this is of type &lt;code&gt;tls.ClientAuthType&lt;/code&gt; There are 5 authorization types for authorizing/validating a client&amp;rsquo;s certificate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tls.NoClientCert&lt;/code&gt; - A client certificate will not be requested and it is not required. This is the default value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.RequestClientCert&lt;/code&gt; - A client certificate will be requested, but it is not required and it won&amp;rsquo;t be validated&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.RequireAnyClientCert&lt;/code&gt; - A client certificate is required, but any valid client certificate is acceptable. It will not be validated against the CA&amp;rsquo;s certificate.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.VerifyClientCertIfGiven&lt;/code&gt; - A client certificate will not be requested, but if present it will be validated against the CA&amp;rsquo;s certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.RequireAndVerifyClientCert&lt;/code&gt; - A client certificate will be required and will be validated against the CA&amp;rsquo;s certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we know what the function&amp;rsquo;s arguments are let&amp;rsquo;s take a look at the function body:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1   var caCert []byte
2   var err error
3   var caCertPool *x509.CertPool
4   if certOpt &amp;gt; tls.RequestClientCert {
5       caCert, err = ioutil.ReadFile(caCertFile)
6       if err != nil {
7           log.Fatal(&amp;quot;Error opening cert file&amp;quot;, caCertFile, &amp;quot;, error &amp;quot;, err)
8       }
9       caCertPool = x509.NewCertPool()
10      caCertPool.AppendCertsFromPEM(caCert)
11  }
12  
13  return &amp;amp;tls.Config{
14      ServerName: host,
15      ClientAuth: certOpt,
16      ClientCAs:  caCertPool,
17      MinVersion: tls.VersionTLS12,
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line 3 - we define an &lt;code&gt;x509.CertPool&lt;/code&gt;. This is a pool of certificates that will be used below. It will contain the certificate of the CA that signed the client&amp;rsquo;s certificate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 4 - we check the value of the &lt;code&gt;certOp&lt;/code&gt;. Any value above &lt;code&gt;tls.RequestClientCert&lt;/code&gt; will require clients to provide a certificate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lines 5 - 8 - In order to validate client certificates a CA certificate needs to be loaded into the &lt;code&gt;caCertPool&lt;/code&gt;. These lines read the CA certificate file and handle any errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lines 9 -10 - We create a new &lt;code&gt;x509.CertPool&lt;/code&gt; and add the CA&amp;rsquo;s certificate to the pool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 15 - The &lt;code&gt;ClientAuth&lt;/code&gt; field is used to specify the level of client certificate authorization and validation that&amp;rsquo;s required. The values and definitions were given above in the discussion about &lt;code&gt;certOpt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 16 - The &lt;code&gt;ClientCAs&lt;/code&gt; field is used to specify the CAs that will be used to validate client certificates. It&amp;rsquo;s value is set from the &lt;code&gt;caCertPool&lt;/code&gt; that was created on lines 9 &amp;amp; 10. The GoDoc for this field contains the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;ClientCAs defines the set of root certificate authorities that servers use if required to verify a client certificate by the policy in ClientAuth.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 17 - &lt;code&gt;MinVersion&lt;/code&gt; sets the minimum TLS version to accept when negotiating versions with the client. TLS versions below 1.2 are considered insecure. See &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7525.txt&#34;&gt;RFC 7525&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-the-client&#34;&gt;Create the client&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/youngkin/gohttps/blob/master/client/client.go&#34;&gt;GitHub&lt;/a&gt; for the complete implementation of this client.&lt;/p&gt;
&lt;p&gt;As stated earlier, this client can successfully communicate with either the simple or advanced servers. Let&amp;rsquo;s take a look at the significant code.&lt;/p&gt;
&lt;p&gt;The first thing to do is to configure the client&amp;rsquo;s certificate and key if present.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if *clientCertFile != &amp;quot;&amp;quot; &amp;amp;&amp;amp; *clientKeyFile != &amp;quot;&amp;quot; {
    cert, err = tls.LoadX509KeyPair(*clientCertFile, *clientKeyFile)
    if err != nil {
        log.Fatalf(&amp;quot;Error creating x509 keypair from client cert file %s and client key file %s&amp;quot;, *clientCertFile, *clientKeyFile)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If provided, the code will create an &lt;code&gt;x509&lt;/code&gt; keypair from the client&amp;rsquo;s certificate and private key. This keypair will be used when negotiating the TLS connection and for encrypting and decrypting communications between the client and server.&lt;/p&gt;
&lt;p&gt;Next, as with the advanced server, we&amp;rsquo;ll create the certificate pool that will contain the certificate of the CA that signed, in this case, the server&amp;rsquo;s certificate.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;caCert, err := ioutil.ReadFile(*caCertFile)
if err != nil {
    log.Fatalf(&amp;quot;Error opening cert file %s, Error: %s&amp;quot;, *caCertFile, err)
}
caCertPool := x509.NewCertPool()
caCertPool.AppendCertsFromPEM(caCert)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we create an &lt;code&gt;http.Transport&lt;/code&gt; with the client&amp;rsquo;s certificate/keypair and the certificate pool containing the CA. This &lt;code&gt;http.Transport&lt;/code&gt; will be used to configure the &lt;code&gt;http.Client&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t := &amp;amp;http.Transport{
    TLSClientConfig: &amp;amp;tls.Config{
        Certificates: []tls.Certificate{cert},
        RootCAs:      caCertPool,
    },
}

client := http.Client{Transport: t, Timeout: 15 * time.Second}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;http.Transport&lt;/code&gt; contains a &lt;code&gt;tls.Config&lt;/code&gt;. As with the servers, the &lt;code&gt;Certificates&lt;/code&gt; field is populated with the client&amp;rsquo;s certificate. There is a new field here, the &lt;code&gt;RootCAs&lt;/code&gt; field. The GoDoc describes this field as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RootCAs defines the set of root certificate authorities that clients use when verifying server certificates. If RootCAs is nil, TLS uses the host&amp;rsquo;s root CA set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is everything that needs to be done to prepare the client to interact with an HTTPS server. The remaining code prepares and sends the request and processes the response.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve cloned or forked the &lt;a href=&#34;https://github.com/youngkin/gohttps&#34;&gt;gohttps&lt;/a&gt; repository you&amp;rsquo;ll notice that it has the following directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gohttps
      |
      +- advserver
      +- client
      +- simpleserver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The source files for the client and each of the servers are in their respective directories. The programs can be built and run from these directories.&lt;/p&gt;
&lt;p&gt;The certificates and keys referenced in the command lines below match the names of the ones generated in the &amp;ldquo;Create Certificates and Keys&amp;rdquo; section above.&lt;/p&gt;
&lt;h3 id=&#34;start-server&#34;&gt;Start server&lt;/h3&gt;
&lt;h4 id=&#34;simple-server-command-line-no-client-validation&#34;&gt;Simple server command line (no client validation)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;./simpleserver -host &amp;quot;localhost&amp;quot; -srvcert &amp;quot;/path/to/localhost.crt&amp;quot; -srvkey &amp;quot;/path/to/localhost.key&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;advanced-server-command-line-will-full-client-certificate-validation--certopt-4&#34;&gt;Advanced server command line will full client certificate validation (&lt;code&gt;-certopt 4&lt;/code&gt;).&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;./advserver -host &amp;quot;localhost&amp;quot; -srvcert &amp;quot;/path/to/localhost.crt&amp;quot; -cacert &amp;quot;/path/to/ExampleCA.crt&amp;quot; \
-srvkey &amp;quot;/path/to/localhost.key&amp;quot; -port 443 -certopt 4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;run-the-client&#34;&gt;Run the client&lt;/h3&gt;
&lt;h4 id=&#34;using-curl&#34;&gt;Using &lt;code&gt;curl&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; request with no client certificate validation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -vi -d &amp;quot;World&amp;quot; --cacert /path/to/ExampleCA.crt https://localhost
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; request with full client certificate validation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -d &amp;quot;World&amp;quot; -vi --cert /path/to/client.crt  --key /path/to/client.key --cacert ./out/ExampleCA.crt https://localhost
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;using-the-client-program&#34;&gt;Using the client program&lt;/h4&gt;
&lt;h5 id=&#34;command-line-for-full-client-certificate-validation-by-the-server&#34;&gt;Command line for full client certificate validation by the server.&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;./client -clientcert &amp;quot;/path/to/client.crt&amp;quot; -clientkey &amp;quot;/path/to/client.key&amp;quot; -cacert &amp;quot;/path/to/ExampleCA.crt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;command-line-for-no-client-certificate-validation-by-the-server&#34;&gt;Command line for no client certificate validation by the server.&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;./client -cacert &amp;quot;/path/to/ExampleCA.crt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;As noted in the section on creating certificates above, if the client and server certificates aren&amp;rsquo;t created with the &lt;code&gt;--domain&lt;/code&gt; flag you may see the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get &amp;quot;https://localhost&amp;quot;: x509: certificate relies on legacy Common Name field, use SANs or temporarily enable Common Name matching with GODEBUG=x509ignoreCN=0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Prefixing the previous commands with &lt;code&gt;GODEBUG=x509ignoreCN=0&lt;/code&gt; will resolve the error. See the section on creating certificates for more details on how to avoid this problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks for following along. We covered a lot in this article including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you had no background in PKI and certificates hopefully you learned enough to get you started on a journey to learn more about the subject&lt;/li&gt;
&lt;li&gt;A brief description of the different software tools available to work with certificates and keys. For this article we used &lt;code&gt;certstrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;How to use &lt;code&gt;certstrap&lt;/code&gt; to create a CA as well as client and server certificate signing requests, certificates, and keys.&lt;/li&gt;
&lt;li&gt;How to write a simple and a more advanced HTTPS server in Go, covering the specifics in detail&lt;/li&gt;
&lt;li&gt;How to write an HTTPS client in Go, again covering the specifics in detail&lt;/li&gt;
&lt;li&gt;Running the server programs and accessing the running processes using both &lt;code&gt;curl&lt;/code&gt; and the client program&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to use the code in the &lt;a href=&#34;https://github.com/youngkin/gohttps&#34;&gt;gohttps repository&lt;/a&gt; for your own learning, experimentation, or as the basis to create your own clients and servers.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cover Photo by &lt;a href=&#34;https://unsplash.com/@yogesh_7?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Yogesh Pedamkar&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/lock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jcbsmpsn/golang-https-example&#34;&gt;The TLS Connection Options&lt;/a&gt; GitHub project is a good resource to quickly create working HTTPS clients and servers. It was my primary source for information about this topic when I was first getting started in creating HTTPS clients and servers. It also covers solutions to some common problems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bbengfort.github.io/programmer/2017/03/03/secure-grpc.html&#34;&gt;Secure gRPC with TLS/SSL&lt;/a&gt; - although geared towards gRPC, the basic TLS underpinnings are the same as with HTTPS. This article filled in some gaps about how to configure TLS in Go.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2017/06/guide-switching-http-https/&#34;&gt;The Complete Guide To Switching From HTTP To HTTPS&lt;/a&gt; provides a detailed, practical, discussion about almost all aspects of the technology behind HTTPS, how to request certificates, and how to configure various web servers to support HTTPS. It&amp;rsquo;s worth at least a quick perusal to see if there&amp;rsquo;s anything of interest.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Public_key_infrastructure&#34;&gt;Public Key Infrastructure(PKI)&lt;/a&gt; is a mix of technology and trusted organizations that provide the underpinnings of secure communication&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;TLS&lt;/a&gt; is an encryption protocol used to secure communications over the Internet&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTPS&#34;&gt;HTTPS&lt;/a&gt; is a secure implementation of the HTTP protocol&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jamielinux.com/docs/openssl-certificate-authority/index.html&#34;&gt;OpenSSL Certificate Authority&lt;/a&gt; is a good resource about creating CAs and certificates using &lt;code&gt;openssl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxize.com/post/creating-a-self-signed-ssl-certificate/&#34;&gt;Creating a Self-Signed SSL Certificate&lt;/a&gt; is a good resource about creating self-signed certificates. These weren&amp;rsquo;t used in this article but it&amp;rsquo;s good to know that it&amp;rsquo;s possible to do this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/square/certstrap&#34;&gt;Certstrap GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34;&gt;easy-rsa GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ssllabs.com/ssltest/index.html&#34;&gt;QualSys SSL Server Test&lt;/a&gt; is a web page you can use to test HTTPS access to an HTTPS server and receive an evaluation of how well it implements best practices.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prod.idrix.eu/secure/&#34;&gt;Idrix&lt;/a&gt; has a nice service to test SSL certificates. For example:
&lt;ul&gt;
&lt;li&gt;curl -vi &amp;ndash;cert ./ClientCert.crt &amp;ndash;key ./ClientCert.key &lt;a href=&#34;https://prod.idrix.eu/secure/&#34;&gt;https://prod.idrix.eu/secure/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekflare.com/openssl-commands-certificates/&#34;&gt;21 OpenSSL Examples to Help You in Real-World&lt;/a&gt; is a good reference containing commonly used &lt;code&gt;openssl&lt;/code&gt; commands&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>