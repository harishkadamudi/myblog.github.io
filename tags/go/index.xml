<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Rich Youngkin</title>
    <link>https://youngkin.github.io/tags/go/</link>
    <description>Recent content in Go on Rich Youngkin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Sep 2021 13:13:42 -0600</lastBuildDate>
    
	<atom:link href="https://youngkin.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sunfounder Raspberry Pi Kit Notes for Go and C - Blinking LED</title>
      <link>https://youngkin.github.io/post/sunfoundergpionotesled/</link>
      <pubDate>Sat, 11 Sep 2021 13:13:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/sunfoundergpionotesled/</guid>
      <description>&lt;p&gt;This is the first article in a series that explores GPIO programming on a Raspberry Pi 3B+. It is a supplement to the &lt;a href=&#34;https://docs.sunfounder.com/projects/raphael-kit/en/latest/play_with_c.html&#34;&gt;Sunfounder Blinking LED project&lt;/a&gt;. The code samples will be in Go and C.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create Secure Clients and Servers in Golang Using HTTPS</title>
      <link>https://youngkin.github.io/post/gohttpsclientserver/</link>
      <pubDate>Sun, 20 Sep 2020 13:09:42 -0600</pubDate>
      
      <guid>https://youngkin.github.io/post/gohttpsclientserver/</guid>
      <description>Overview The purpose of this article is to show how to write secure web services and clients using Go and HTTPS. In researching how to accomplish this I came across numerous articles and gists. However, none of them provided the complete picture I needed to implement a robust client or server. Most of them only provided terse code examples with equally terse examples regarding how to create the certificates needed for the code to work.</description>
    </item>
    
  </channel>
</rss>